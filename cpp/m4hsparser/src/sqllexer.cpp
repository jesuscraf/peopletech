/* A lexical scanner generated by flex */


#define FLEX_SCANNER



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include "m4stl.hpp"

#ifdef _UNIX
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#ifdef __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */


#ifdef __TURBOC__
#define YY_USE_CONST
#endif


#ifndef YY_USE_CONST
#ifndef const
#define const
#endif
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.
 */
#define YY_START ((yy_start - 1) / 2)

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file".  Now included
 * only for backward compatibility with previous versions of flex.
 */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern ptrdiff_t yyleng;

#ifdef __cplusplus
extern "C" {
#endif
	extern int yywrap YY_PROTO(( void ));
#ifdef __cplusplus
	}
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( unsigned int ));
static void *yy_flex_realloc YY_PROTO(( void *, unsigned int ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define INITIAL 0
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <flexlexer.h>

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, const char *, int ));
#endif



/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_END_OF_BUFFER 59
static const short int yy_accept[258] =
    {   0,
        0,    0,   59,   57,   55,   56,   36,   37,   35,   57,
       29,   30,   43,   41,   32,   42,   33,   44,    1,   51,
       46,   50,   34,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   57,   57,
       57,   57,    0,    5,    0,    0,    2,    3,    1,    0,
        0,   52,   49,    0,   53,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   16,   54,   54,   54,
       40,   54,   54,   54,    0,   47,    0,    0,    0,    0,
       45,    0,   48,    0,   31,    0,    2,    0,    0,   17,
       39,   27,   54,   54,   54,   54,   54,   54,   54,   54,

        0,   54,   54,   38,   54,   54,   54,   54,    0,    0,
        0,    0,    2,    0,    0,    3,    0,   54,   28,   54,
       54,   10,   54,   54,   54,    0,   54,   54,   21,    0,
       54,   54,   54,   54,   54,   54,    0,    0,    0,    0,
        2,    0,   54,   54,   54,   54,   54,   54,    0,    0,
       54,   54,    0,    0,   54,   54,   54,   54,   13,   12,
        0,    0,    0,   54,   54,   20,    0,   54,   25,   54,
        0,    0,    0,   54,   23,    0,    0,   54,   54,    0,
       54,    8,    0,   54,    0,    0,    0,   18,   54,    0,
       11,   54,    0,   23,   54,    0,    0,   54,   22,    0,

       26,    0,   54,    0,    0,    0,    9,   11,   54,    0,
       54,    0,   22,   54,   26,    0,   14,    0,    0,    4,
       15,    0,   24,    0,   54,   14,    0,    0,   24,    0,
       19,    0,    0,   19,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    6,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    7,    0
    } ;

static const int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    7,    1,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    1,   20,
       21,   22,    1,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       33,   40,   41,   42,   43,   44,   45,   46,   47,   33,
        1,    1,    1,   48,   49,    1,   24,   25,   26,   50,

       51,   29,   30,   31,   32,   33,   34,   35,   36,   52,
       53,   54,   33,   40,   55,   56,   43,   44,   45,   57,
       47,   33,   58,   59,   60,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   61,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const int yy_meta[62] =
    {   0,
        1,    1,    2,    1,    2,    3,    3,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    1,    1,    1,
        1
    } ;

static const short int yy_base[260] =
    {   0,
        0,    0,  429,  430,  430,  430,  430,  430,  430,  419,
       60,  430,  430,  430,  430,  430,  409,  430,   47,   64,
      430,   67,  430,   35,   46,    0,   49,   21,  386,  385,
      400,   43,  391,   41,  382,   54,   52,  390,   89,   97,
      104,  105,  411,  430,  109,  110,   74,   99,  100,  373,
      127,  430,  430,  130,  430,    0,  383,   69,  391,   81,
       83,   89,  384,   82,  101,  371,   99,  138,  380,  101,
      106,  378,  380,  108,  156,  430,  160,  163,  356,  164,
      430,  167,  430,  172,  430,  166,  152,  174,  371,    0,
        0,    0,  364,  382,  140,  144,  371,  363,  373,  150,

      189,  159,  158,  196,  166,  167,  108,  364,  202,  385,
      211,  384,  383,  209,  382,  381,  360,  177,    0,  365,
      177,    0,  175,  188,  356,  192,  190,  360,    0,  232,
      209,  362,  353,  366,  201,  211,  372,  240,  368,  367,
      366,  346,  215,  211,  206,  248,  352,  210,  212,  346,
      254,  345,  227,  347,  227,  344,  268,  229,  272,    0,
      359,  357,  346,  227,  347,    0,  273,  325,    0,  231,
      282,  336,  285,  327,    0,  238,  335,  323,  253,  286,
      320,    0,  293,  331,  346,  345,  325,    0,  257,  314,
        0,  334,  316,  430,  323,  312,  264,  272,    0,  309,

        0,  320,  319,  338,  334,  309,    0,  430,  260,  315,
      314,  273,  430,  275,  430,  313,    0,  329,  331,  430,
        0,  310,    0,  277,  273,  430,  326,  325,  430,  275,
        0,  327,  323,  430,  322,  324,  320,  318,  326,  315,
      305,  317,  316,  430,  296,  290,  189,  189,  155,  133,
      127,   97,   94,  327,  328,  430,  430,  388,   80
    } ;

static const short int yy_def[260] =
    {   0,
      257,    1,  257,  257,  257,  257,  257,  257,  257,  258,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  257,  257,
      257,  257,  258,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,

      257,  259,  259,  259,  259,  259,  259,  259,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  259,  259,  259,
      259,  259,  259,  259,  259,  257,  259,  259,  259,  257,
      259,  259,  259,  259,  259,  259,  257,  257,  257,  257,
      257,  257,  259,  259,  259,  259,  259,  259,  257,  257,
      259,  259,  257,  257,  259,  259,  259,  259,  259,  259,
      257,  257,  257,  259,  259,  259,  257,  259,  259,  259,
      257,  257,  257,  259,  259,  257,  257,  259,  259,  257,
      259,  259,  257,  259,  257,  257,  257,  259,  259,  257,
      259,  259,  257,  257,  259,  257,  257,  259,  259,  257,

      259,  257,  259,  257,  257,  257,  259,  257,  259,  257,
      259,  257,  257,  259,  257,  257,  259,  257,  257,  257,
      259,  257,  259,  257,  259,  257,  257,  257,  257,  257,
      259,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,    0,  257,  257
    } ;

static const short int yy_nxt[492] =
    {   0,
        4,    5,    6,    5,    4,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,    4,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   26,   26,   33,   26,   34,   35,   26,   26,
       36,   26,   37,   26,   38,   26,   26,   39,    4,   27,
       28,   34,   35,   26,   36,   26,   26,   40,   41,    4,
       42,   45,   48,   45,   49,   51,   63,   51,   54,   57,
       54,   58,   46,   60,   50,   59,   61,   63,   70,   67,
       62,   72,   56,   68,   52,   53,   58,   55,   73,   59,
       75,   47,   75,   70,   67,   91,   60,   68,   77,   61,

       77,   86,  254,   73,   72,   80,   82,   80,   82,   76,
       45,   84,   45,   84,  253,   48,   87,   49,   91,   97,
       85,   46,   93,   94,   86,   83,   88,   50,   51,   95,
       51,   54,  105,   54,   97,  108,   93,   94,   98,  101,
      100,  101,  104,   95,  252,  135,   78,   52,   53,   88,
       55,  251,   79,   98,  100,  105,  104,   75,  108,   75,
      135,   77,   81,   77,  109,   80,  109,   80,   82,   87,
       82,  110,  250,   84,  102,   84,   76,  125,  112,  114,
      112,  120,   85,  113,  121,  129,  115,   83,  115,  102,
      101,  116,  101,  133,  134,  120,  127,  130,  121,  130,

      125,  128,  114,  109,  143,  109,  249,  248,  129,   78,
      110,  127,  138,  146,  138,   79,  133,  134,  145,  139,
      131,  140,   81,  140,  147,  126,  141,  143,  146,  149,
      132,  151,  145,  130,  150,  130,  155,  159,  160,  147,
      126,  138,  164,  138,  149,  151,  166,  165,  139,  167,
      170,  167,  159,  171,  176,  173,  153,  173,  192,  155,
      166,  160,  165,  188,  170,  164,  154,  171,  178,  180,
      182,  180,  168,  183,  167,  183,  167,  176,  188,  196,
      199,  192,  178,  173,  182,  173,  173,  180,  173,  180,
      174,  213,  181,  196,  183,  184,  183,  190,  207,  214,

      224,  221,  225,  199,  230,  174,  243,  247,  243,  231,
      200,  234,  207,  246,  213,  221,  202,  243,  193,  243,
      245,  193,  214,  224,  231,  225,  234,  230,  255,  255,
      255,  255,  242,  193,  241,  240,  193,  239,  238,  237,
      236,  235,  233,  232,  229,  228,  227,  226,  223,  222,
      220,  219,  218,  217,  216,  215,  212,  211,  210,  209,
      208,  206,  205,  204,  244,  203,  201,  198,  197,  195,
      194,  191,  189,  187,  186,  244,  185,  179,  177,  175,
      172,  169,  163,  141,  141,  162,  256,  256,   43,  161,
       43,  158,  157,  156,  152,  148,  144,  142,  116,  116,

      113,  113,  137,  136,  124,  123,  122,  119,  118,  117,
      111,  107,  106,  103,   99,   96,   92,   90,   89,   44,
       74,   71,   69,   66,   65,   64,   47,   44,  257,    3,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257

    } ;

static const short int yy_chk[492] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   11,   19,   11,   19,   20,   28,   20,   22,   24,
       22,   24,   11,   25,   19,   24,   27,   28,   34,   32,
       27,   36,  259,   32,   20,   20,   24,   22,   37,   24,
       39,   47,   39,   34,   32,   58,   25,   32,   40,   27,

       40,   47,  253,   37,   36,   41,   42,   41,   42,   39,
       45,   46,   45,   46,  252,   49,   48,   49,   58,   64,
       46,   45,   60,   61,   47,   42,   48,   49,   51,   62,
       51,   54,   71,   54,   64,   74,   60,   61,   65,   68,
       67,   68,   70,   62,  251,  107,   40,   51,   51,   48,
       54,  250,   40,   65,   67,   71,   70,   75,   74,   75,
      107,   77,   41,   77,   78,   80,   78,   80,   82,   87,
       82,   78,  249,   84,   68,   84,   75,  100,   86,   87,
       86,   95,   84,   86,   96,  103,   88,   82,   88,   68,
      101,   88,  101,  105,  106,   95,  102,  104,   96,  104,

      100,  102,   87,  109,  118,  109,  248,  247,  103,   77,
      109,  102,  111,  123,  111,   77,  105,  106,  121,  111,
      104,  114,   80,  114,  124,  101,  114,  118,  123,  126,
      104,  127,  121,  130,  126,  130,  131,  135,  136,  124,
      101,  138,  143,  138,  126,  127,  145,  144,  138,  146,
      148,  146,  135,  149,  153,  151,  130,  151,  170,  131,
      145,  136,  144,  164,  148,  143,  130,  149,  155,  157,
      158,  157,  146,  159,  167,  159,  167,  153,  164,  176,
      179,  170,  155,  171,  158,  171,  173,  180,  173,  180,
      151,  197,  157,  176,  183,  159,  183,  167,  189,  198,

      212,  209,  214,  179,  224,  151,  241,  246,  241,  225,
      180,  230,  189,  245,  197,  209,  183,  243,  171,  243,
      242,  173,  198,  212,  225,  214,  230,  224,  254,  255,
      254,  255,  240,  171,  239,  238,  173,  237,  236,  235,
      233,  232,  228,  227,  222,  219,  218,  216,  211,  210,
      206,  205,  204,  203,  202,  200,  196,  195,  193,  192,
      190,  187,  186,  185,  241,  184,  181,  178,  177,  174,
      172,  168,  165,  163,  162,  243,  161,  156,  154,  152,
      150,  147,  142,  141,  140,  139,  254,  255,  258,  137,
      258,  134,  133,  132,  128,  125,  120,  117,  116,  115,

      113,  112,  110,  108,   99,   98,   97,   94,   93,   89,
       79,   73,   72,   69,   66,   63,   59,   57,   50,   43,
       38,   35,   33,   31,   30,   29,   17,   10,    3,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
# line 1 "sqllexer.l"
# line 2 "sqllexer.l"

/****************************************************************************
lexer.l
****************************************************************************/
#include "selectinfo.hpp"
#include "sqlpartk.h"

#include <string.h>

/* macros */
/* para case-insensitive */
/* White space entre keywords y operadores */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

# line 50 "sqllexer.l"



	if ( yy_init )
		{
#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( yy_current_buffer )
			yy_init_buffer( yy_current_buffer, yyin );
		else
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();

		yy_init = 0;
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 258 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 430 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_USER_ACTION
# line 52 "sqllexer.l"
{ 

		// INTEGER 
		//
		// NO se pone [+-]?, porque operaciones a+2 devolveria un a,+2, en vez de a,+,2

		strcpy (yylval.pcValue, yytext);
		return LITERAL_INTEGER ; 
	}
	YY_BREAK
case 2:
# line 64 "sqllexer.l"
case 3:
# line 65 "sqllexer.l"
case 4:
YY_USER_ACTION
# line 65 "sqllexer.l"
{

		// 	FLOAT 
		//
	 	//-Si aparece ".":
 		//	-Debe aparecer la parte entera O la decimal (no pueden omitirse ambas).
	 	//	-El exponente SIEMPRE es opcional.    
 		//-Si NO aparece ".":                                   
		//	-Debe aparecer alguna parte entera.
		//	-Debe aparecer el exponente (si no, es un entero).
		//
		// NO se pone [+-]?, porque operaciones a+2 devolveria un a,+2, en vez de a,+,2

		strcpy (yylval.pcValue, yytext);
		return LITERAL_FLOAT ; 
	}
	YY_BREAK
case 5:
YY_USER_ACTION
# line 83 "sqllexer.l"
{ 

		//	LITERAL_STR
		//
		// Cualquier ocurrencia 'cadena' es un literal tipo texto. 
		//

		strcpy (yylval.pcValue, yytext);
		return LITERAL_STR ; 
	}
	YY_BREAK
case 6:
YY_USER_ACTION
# line 94 "sqllexer.l"
{

		strcpy (yylval.pcValue, yytext);
		return LITERAL_DATE ; 
	}
	YY_BREAK
case 7:
YY_USER_ACTION
# line 101 "sqllexer.l"
{

		//	LITERAL_TIME_STAMP
		//
		//	Cualquier ocurrencia { ts 'yyyy-mm-aa hh:mm:ss' }  es un literal tipo date. 
		//
		
		strcpy (yylval.pcValue, yytext);
		return LITERAL_TIME_STAMP ; 
	}
	YY_BREAK
case 8:
YY_USER_ACTION
# line 112 "sqllexer.l"
{ 

		//	KEYWORDS
		//
		//	Definirlas ANTES de  IDENTIFIER_M, o pueden interpretarse como IDENTIDIER

		strcpy (yylval.pcValue, yytext);
		return SELECT ; 
	} 
	YY_BREAK
case 9:
YY_USER_ACTION
# line 122 "sqllexer.l"
{	strcpy (yylval.pcValue, yytext);
												return DISTINCT ; } 
	YY_BREAK
case 10:
YY_USER_ACTION
# line 124 "sqllexer.l"
{	strcpy (yylval.pcValue, yytext);
												return FROM; } 
	YY_BREAK
case 11:
YY_USER_ACTION
# line 126 "sqllexer.l"
{	strcpy (yylval.pcValue, yytext);
												return GROUP_BY ; } 
	YY_BREAK
case 12:
YY_USER_ACTION
# line 128 "sqllexer.l"
{ 	strcpy (yylval.pcValue, yytext);
												return WHERE ; }
	YY_BREAK
case 13:
YY_USER_ACTION
# line 130 "sqllexer.l"
{ 	strcpy (yylval.pcValue, yytext);
												return UNION ; }
	YY_BREAK
case 14:
YY_USER_ACTION
# line 132 "sqllexer.l"
{ 	strcpy (yylval.pcValue, yytext);
												return UNION_ALL ; }
	YY_BREAK
case 15:
YY_USER_ACTION
# line 134 "sqllexer.l"
{ 	strcpy (yylval.pcValue, yytext);
												return INTERSECT ; }
	YY_BREAK
case 16:
YY_USER_ACTION
# line 136 "sqllexer.l"
{ 	strcpy (yylval.pcValue, yytext);
												return IN_KW ; }
	YY_BREAK
case 17:
YY_USER_ACTION
# line 138 "sqllexer.l"
{ 	strcpy (yylval.pcValue, yytext);
												return ALL ; }
	YY_BREAK
case 18:
YY_USER_ACTION
# line 140 "sqllexer.l"
{ 	strcpy (yylval.pcValue, yytext);
												return OPE_BETWEEN ; }
	YY_BREAK
case 19:
YY_USER_ACTION
# line 142 "sqllexer.l"
{ 	strcpy (yylval.pcValue, yytext);
												return OPE_NOT_BETWEEN ; }
	YY_BREAK
case 20:
YY_USER_ACTION
# line 144 "sqllexer.l"
{ 	strcpy (yylval.pcValue, yytext);
												return EXISTS ; }
	YY_BREAK
case 21:
YY_USER_ACTION
# line 146 "sqllexer.l"
{ 	strcpy (yylval.pcValue, yytext);
												return OPE_LIKE ; }
	YY_BREAK
case 22:
YY_USER_ACTION
# line 148 "sqllexer.l"
{ 	strcpy (yylval.pcValue, yytext);
												return OPE_NOT_LIKE ; }
	YY_BREAK
case 23:
YY_USER_ACTION
# line 150 "sqllexer.l"
{ 	strcpy (yylval.pcValue, yytext);
												return OPE_IS_NULL ; }									
	YY_BREAK
case 24:
YY_USER_ACTION
# line 152 "sqllexer.l"
{ 	strcpy (yylval.pcValue, yytext);
												return OPE_IS_NOT_NULL ; }									
	YY_BREAK
case 25:
YY_USER_ACTION
# line 154 "sqllexer.l"
{ 	strcpy (yylval.pcValue, yytext);
												return HAVING ; }
	YY_BREAK
case 26:
YY_USER_ACTION
# line 156 "sqllexer.l"
{ 	strcpy (yylval.pcValue, yytext);
												return ORDER_BY ; }
	YY_BREAK
case 27:
YY_USER_ACTION
# line 158 "sqllexer.l"
{ 	strcpy (yylval.pcValue, yytext);
												return ASC ; }
	YY_BREAK
case 28:
YY_USER_ACTION
# line 160 "sqllexer.l"
{ 	strcpy (yylval.pcValue, yytext);
												return DESC ; }
	YY_BREAK
case 29:
YY_USER_ACTION
# line 164 "sqllexer.l"
{ 
				// OPERATORS 
				strcpy (yylval.pcValue, yytext);
				return OPEN_PAREN ; 
			}
	YY_BREAK
case 30:
YY_USER_ACTION
# line 169 "sqllexer.l"
{ 	strcpy (yylval.pcValue, yytext);
						return CLOSE_PAREN ; }
	YY_BREAK
case 31:
YY_USER_ACTION
# line 171 "sqllexer.l"
{  	strcpy (yylval.pcValue, yytext);
						return OPE_OUTER_JOIN; }	
	YY_BREAK
case 32:
YY_USER_ACTION
# line 173 "sqllexer.l"
{  	strcpy (yylval.pcValue, yytext);
						return OPE_COMMA ; }
	YY_BREAK
case 33:
YY_USER_ACTION
# line 175 "sqllexer.l"
{  	strcpy (yylval.pcValue, yytext);
						return OPE_POINT ; }
	YY_BREAK
case 34:
YY_USER_ACTION
# line 177 "sqllexer.l"
{  	strcpy (yylval.pcValue, yytext);
						return OPE_AT ; }
	YY_BREAK
case 35:
YY_USER_ACTION
# line 179 "sqllexer.l"
{  	strcpy (yylval.pcValue, yytext);
						return OPE_AMP ; }
	YY_BREAK
case 36:
YY_USER_ACTION
# line 181 "sqllexer.l"
{  	strcpy (yylval.pcValue, yytext);
						return OPE_ALM ; }
	YY_BREAK
case 37:
YY_USER_ACTION
# line 183 "sqllexer.l"
{  	strcpy (yylval.pcValue, yytext);
						return OPE_DOL ; }
	YY_BREAK
case 38:
YY_USER_ACTION
# line 188 "sqllexer.l"
{  	strcpy (yylval.pcValue, yytext);
						return OPE_NOT ; }
	YY_BREAK
case 39:
YY_USER_ACTION
# line 190 "sqllexer.l"
{  	strcpy (yylval.pcValue, yytext);
						return OPE_AND ; }
	YY_BREAK
case 40:
YY_USER_ACTION
# line 192 "sqllexer.l"
{  	strcpy (yylval.pcValue, yytext);
						return OPE_OR ; }
	YY_BREAK
case 41:
YY_USER_ACTION
# line 195 "sqllexer.l"
{  	strcpy (yylval.pcValue, yytext);
						return OPE_ADD ; }		
	YY_BREAK
case 42:
YY_USER_ACTION
# line 197 "sqllexer.l"
{  	strcpy (yylval.pcValue, yytext);
						return OPE_SUBS ; }       
	YY_BREAK
case 43:
YY_USER_ACTION
# line 199 "sqllexer.l"
{  	strcpy (yylval.pcValue, yytext);
						return OPE_MULT ; }
	YY_BREAK
case 44:
YY_USER_ACTION
# line 201 "sqllexer.l"
{  	strcpy (yylval.pcValue, yytext);
						return OPE_DIV ; }
	YY_BREAK
case 45:
YY_USER_ACTION
# line 203 "sqllexer.l"
{  	strcpy (yylval.pcValue, yytext);
						return OPE_CONCAT_STR ; }
	YY_BREAK
case 46:
YY_USER_ACTION
# line 206 "sqllexer.l"
{  	strcpy (yylval.pcValue, yytext);
					return OPE_EQU ; }
	YY_BREAK
case 47:
YY_USER_ACTION
# line 208 "sqllexer.l"
{  	strcpy (yylval.pcValue, yytext);
					return OPE_NOT_EQU ; }
	YY_BREAK
case 48:
YY_USER_ACTION
# line 210 "sqllexer.l"
{  	strcpy (yylval.pcValue, yytext);
					return OPE_NOT_EQU ; }
	YY_BREAK
case 49:
YY_USER_ACTION
# line 212 "sqllexer.l"
{  	strcpy (yylval.pcValue, yytext);
					return OPE_NOT_EQU ; }
	YY_BREAK
case 50:
YY_USER_ACTION
# line 214 "sqllexer.l"
{   strcpy (yylval.pcValue, yytext);
					return OPE_GT ; }
	YY_BREAK
case 51:
YY_USER_ACTION
# line 216 "sqllexer.l"
{   strcpy (yylval.pcValue, yytext);
					return OPE_LT ; }
	YY_BREAK
case 52:
YY_USER_ACTION
# line 218 "sqllexer.l"
{   strcpy (yylval.pcValue, yytext);
					return OPE_LE ; }
	YY_BREAK
case 53:
YY_USER_ACTION
# line 220 "sqllexer.l"
{   strcpy (yylval.pcValue, yytext);
					return OPE_GE ; } 
	YY_BREAK
case 54:
YY_USER_ACTION
# line 225 "sqllexer.l"
{

		strcpy (yylval.pcValue, yytext);
		return IDENTIFIER ; 

	}
	YY_BREAK
case 55:
YY_USER_ACTION
# line 233 "sqllexer.l"
{ /* do nothing */ }
	YY_BREAK
case 56:
YY_USER_ACTION
# line 234 "sqllexer.l"
{ return -1; }
	YY_BREAK
case 57:
YY_USER_ACTION
# line 235 "sqllexer.l"
{ return LEXER_ERROR ; }
	YY_BREAK
case 58:
YY_USER_ACTION
# line 237 "sqllexer.l"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		size_t yy_amount_of_matched_text = yy_cp - yytext_ptr - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
							yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr - 1; /* copy prev. char, too */
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			size_t yy_c_buf_p_offset = yy_c_buf_p - b->yy_ch_buf;

			b->yy_buf_size *= 2;
			b->yy_ch_buf = (char *)
				yy_flex_realloc( (void *) b->yy_ch_buf,
						 b->yy_buf_size );

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move - YY_MORE_ADJ == 1 )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	/* yytext begins at the second character in yy_ch_buf; the first
	 * character is the one which preceded it before reading in the latest
	 * buffer; it needs to be kept around in case it's a newline, so
	 * yy_get_previous_state() will have with '^' rules active.
	 */

	yytext_ptr = &yy_current_buffer->yy_ch_buf[1];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 258 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 258 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 257);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += dest - source;
		yy_bp += dest - source;
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
		yy_cp[-2] = '\n';

	*--yy_cp = (char) c;


	/* Note: the formal parameter *must* be called "yy_bp" for this
	 * macro to now work correctly.
	 */
	YY_DO_BEFORE_ACTION; /* set up yytext again */
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );

	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );

	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	yy_flex_free( (void *) b->yy_ch_buf );
	yy_flex_free( (void *) b );
	}


void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )
	{
	b->yy_input_file = file;

	/* We put in the '\n' and start reading from [1] so that an
	 * initial match-at-newline will be true.
	 */

	b->yy_ch_buf[0] = '\n';
	b->yy_n_chars = 1;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[1];

	b->yy_is_interactive = 0;

	b->yy_fill_buffer = 1;

	b->yy_buffer_status = YY_BUFFER_NEW;
	}


void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		int new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}


void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}


int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}



void yyFlexLexer::LexerError( const char msg[] )
	{
	cerr << msg << '\n';
	exit( 1 );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, const char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
const char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( unsigned int size )
#else
static void *yy_flex_alloc( size )
unsigned int size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, unsigned int size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
unsigned int size;
#endif
	{
	return (void *) realloc( ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}
# line 237 "sqllexer.l"


/* 
*************************************************************************************************
*										PROGRAM SECTION											*
************************************************************************************************* 
*/


int yywrap () 
{
	return -1;
}

