#include "m4stl.hpp"

#define yyFlexLexer ClRFN_FlexLexer
#define yy_create_buffer ClRFN__create_buffer
#define yy_delete_buffer ClRFN__delete_buffer
#define yy_flex_debug ClRFN__flex_debug
#define yy_init_buffer ClRFN__init_buffer
#define yy_load_buffer_state ClRFN__load_buffer_state
#define yy_switch_to_buffer ClRFN__switch_to_buffer
#define yyin ClRFN_in
#define yyleng ClRFN_leng
#define yylex ClRFN_lex
#define yyout ClRFN_out
#define yyrestart ClRFN_restart
#define yytext ClRFN_text
#define yywrap ClRFN_wrap

/* A lexical scanner generated by flex */


#define FLEX_SCANNER



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

//#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#ifdef __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */


#ifdef __TURBOC__
#define YY_USE_CONST
#endif


#ifndef YY_USE_CONST
#ifndef const
#define const
#endif
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.
 */
#define YY_START ((yy_start - 1) / 2)

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file".  Now included
 * only for backward compatibility with previous versions of flex.
 */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#ifdef __cplusplus
extern "C" {
#endif
	extern int yywrap YY_PROTO(( void ));
#ifdef __cplusplus
	}
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( unsigned int ));
static void *yy_flex_realloc YY_PROTO(( void *, unsigned int ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define INITIAL 0
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <flexlexer.h>

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, const char *, int ));
#endif



/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_END_OF_BUFFER 51
static const short int yy_accept[203] =
    {   0,
        0,    0,   51,   49,   46,   46,   49,   49,   49,   49,
        1,   45,   47,   49,   34,   49,   49,   49,   49,   37,
       49,   49,   49,   49,   49,   49,   40,   49,   43,   44,
        0,    5,    0,    1,    2,    0,    3,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   35,   38,    0,   41,
        0,    6,    0,    0,    0,    0,    0,   36,   39,   42,
        0,    0,   48,    2,    0,    0,   33,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    8,    7,    0,   13,
       14,   15,    0,    0,    2,    0,    0,    3,    0,    0,
        0,    0,    0,    0,    0,    0,   16,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    2,    0,
        0,    0,    0,   22,   21,    0,    0,    0,    0,   12,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   32,    9,   26,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   17,    0,    0,    0,    0,
        0,    0,   23,    0,    0,   20,    0,   11,    0,    0,
        0,    4,    0,    0,    0,   18,   28,    0,   27,    0,
        0,    0,    0,   19,    0,   10,    0,    0,   31,   24,
        0,   30,    0,    0,    0,    0,    0,    0,    0,   29,

       25,    0
    } ;

static const int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    1,
        1,    1,    5,    1,    5,    6,    7,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    1,    9,    1,
       10,    1,   11,    1,   12,   13,   14,   15,   16,   17,
       18,   19,   20,    1,    1,   21,   22,   23,   24,   25,
        1,   26,   27,   28,   29,   30,   31,   32,   33,    1,
        1,    1,    1,    1,    1,    1,   12,   13,   14,   15,

       34,   17,   18,   19,   20,    1,    1,   21,   22,   35,
       36,   37,    1,   26,   27,   38,   29,   30,   31,   39,
       33,    1,   40,    1,   41,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const int yy_meta[42] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1
    } ;

static const short int yy_base[205] =
    {   0,
        0,    0,  289,  290,  290,  290,  284,   36,  279,  279,
       37,  290,  290,  264,  290,   30,  257,   27,   32,  290,
      271,   41,   33,   44,  252,   33,  290,   56,  290,  290,
      277,  290,  272,   66,   65,  276,   67,  246,  256,  249,
      261,  260,   20,   61,   66,   54,  290,  290,   52,  290,
      256,  290,   60,  251,  257,  239,  248,  290,  290,  290,
       84,  265,  290,   86,   92,  242,  290,  246,  107,   68,
       79,   76,  104,  250,  246,   84,  290,  290,   86,  290,
      290,  290,   93,  255,  254,  107,  253,  252,  235,  240,
      106,   96,  107,  102,  237,  109,  290,  241,  114,  136,

      234,  123,  235,  124,  241,  223,  237,  242,  241,  225,
      118,  235,  224,  290,  290,  124,  225,  118,  227,  290,
      231,  221,  215,  122,  220,  217,  123,  124,  222,  135,
      211,  130,  135,  218,  221,  136,  212,  290,  290,  290,
      215,  149,  145,  212,  208,  153,  210,  202,  202,  207,
      207,  206,  207,  154,  204,  290,  210,  148,  193,  200,
      204,  155,  290,  203,  147,  290,  154,  290,  148,  195,
      156,  290,  198,  154,  165,  290,  290,  171,  290,  161,
      192,  190,  186,  290,  169,  290,  165,  170,  290,  172,
      184,  290,  170,   99,   98,   89,  178,  174,   30,  290,

      290,  290,   54,  213
    } ;

static const short int yy_def[205] =
    {   0,
      202,    1,  202,  202,  202,  202,  203,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      203,  202,  202,  202,  202,  204,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  204,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,

      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,

      202,    0,  202,  202
    } ;

static const short int yy_nxt[332] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,    5,   12,
       13,   14,   15,    4,   16,   17,   18,    4,   19,   20,
        4,   21,   22,   23,   24,   25,   26,    4,   27,    4,
        4,   28,    4,   17,   22,   23,   24,    4,   28,   29,
       30,   33,   37,   34,   34,   40,   43,   45,   57,   51,
       44,   71,   38,   47,   31,   52,  201,   54,   71,   41,
       48,   53,   44,   40,   49,   45,   57,   52,   58,   50,
       55,   37,   35,   34,   64,   59,   49,   74,   76,   77,
       61,   38,   65,   72,   60,   75,   73,   79,   84,   77,
       76,   85,   97,   64,   98,   72,   87,   79,   61,   88,

       65,   86,  104,   99,   97,  100,  105,  198,  107,  197,
      106,  108,   98,   99,  109,  101,  196,  117,  105,   86,
       91,   92,  106,   93,  112,   94,  107,  114,  115,  113,
      116,   95,  119,   96,  114,  117,  121,  100,  123,  125,
      130,  113,  116,   95,  119,  135,  133,  101,  121,  140,
      143,  144,  130,  146,  149,  135,  123,  125,  133,  140,
      143,  144,  150,  153,  156,  147,  149,  157,  160,  168,
      175,  171,  150,  153,  177,  179,  186,  178,  181,  157,
      191,  183,  156,  171,  177,  179,  160,  168,  175,  178,
      181,  183,  184,  185,  186,  195,  190,  192,  191,  193,

      199,  200,  184,  194,  189,  185,  190,  192,  188,  193,
      187,  200,  199,   62,   62,  182,  180,  176,  174,  173,
      172,  170,  169,  167,  166,  165,  164,  163,  162,  161,
      159,  158,  155,  154,  152,  151,  148,  145,  142,  141,
      139,  138,  137,  136,  134,  132,  131,  129,  109,  109,
      128,  127,  126,  124,  122,  120,  118,  111,  110,   88,
       88,   85,   85,  103,  102,   90,   89,   63,   83,   82,
       81,   80,   78,   70,   69,   68,   67,   66,   63,   35,
       32,   56,   46,   42,   39,   36,   35,   32,  202,    3,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,

      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202
    } ;

static const short int yy_chk[332] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    8,   11,    8,   11,   16,   18,   19,   26,   23,
       18,   43,   11,   22,  203,   23,  199,   24,   43,   16,
       22,   23,   18,   16,   22,   19,   26,   23,   28,   22,
       24,   34,   35,   34,   37,   28,   22,   45,   46,   49,
       35,   34,   37,   44,   28,   45,   44,   53,   61,   49,
       46,   61,   70,   64,   71,   44,   65,   53,   35,   65,

       37,   64,   76,   72,   70,   73,   76,  196,   83,  195,
       79,   86,   71,   72,   86,   73,  194,   94,   76,   64,
       69,   69,   79,   69,   91,   69,   83,   92,   92,   91,
       93,   69,   96,   69,   92,   94,   99,  100,  102,  104,
      111,   91,   93,   69,   96,  118,  116,  100,   99,  124,
      127,  128,  111,  130,  132,  118,  102,  104,  116,  124,
      127,  128,  133,  136,  142,  130,  132,  143,  146,  154,
      162,  158,  133,  136,  165,  169,  180,  167,  171,  143,
      187,  174,  142,  158,  165,  169,  146,  154,  162,  167,
      171,  174,  175,  178,  180,  193,  185,  188,  187,  190,

      197,  198,  175,  191,  183,  178,  185,  188,  182,  190,
      181,  198,  197,  204,  204,  173,  170,  164,  161,  160,
      159,  157,  155,  153,  152,  151,  150,  149,  148,  147,
      145,  144,  141,  137,  135,  134,  131,  129,  126,  125,
      123,  122,  121,  119,  117,  113,  112,  110,  109,  108,
      107,  106,  105,  103,  101,   98,   95,   90,   89,   88,
       87,   85,   84,   75,   74,   68,   66,   62,   57,   56,
       55,   54,   51,   42,   41,   40,   39,   38,   36,   33,
       31,   25,   21,   17,   14,   10,    9,    7,    3,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,

      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
# line 1 "RFNLexer.l"
# line 2 "RFNLexer.l"

/****************************************************************************
RFNlexer.l
Interpreta los *.PAR y rellena una estructura en memoria
****************************************************************************/

//IMPORTANTE: Abrir la { de la accion en la misma linea que la regla, o mete break antes del 
//	codigo.

#include "rfnparser.h"	//Va primero, define el YYSTYPE
#include "rfnpartk.h"
#include "rfntrans.h"

#define YYLVAL Parser->yylval


/* macros */
/* para case-insensitive */
/* White space entre keywords y operadores */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

# line 60 "RFNLexer.l"



	if ( yy_init )
		{
#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( yy_current_buffer )
			yy_init_buffer( yy_current_buffer, yyin );
		else
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();

		yy_init = 0;
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 203 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 290 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_USER_ACTION
# line 62 "RFNLexer.l"
{ 

		// INTEGER 
		//
		// OJO, se pone [+-]? por que no hay expresiones. Si fuese asi, no se podria poner, es un problema de
		//	parser, pues en el lexer operaciones a+2 devolveria un a,+2, en vez de a,+,2
		 
		PAR->m_oLiteralData.StrCpy(yytext) ;
		return RFN_LITERAL_INTEGER ; 
	}
	YY_BREAK
case 2:
# line 75 "RFNLexer.l"
case 3:
# line 76 "RFNLexer.l"
case 4:
YY_USER_ACTION
# line 76 "RFNLexer.l"
{

		// 	FLOAT 
		//
		//Lo del signo, igual que en INTEGER
		//
	 	//-Si aparece ".":
 		//	-Debe aparecer la parte entera O la decimal (no pueden omitirse ambas).
	 	//	-El exponente SIEMPRE es opcional.    
 		//-Si NO aparece ".":                                   
		//	-Debe aparecer alguna parte entera.
		//	-Debe aparecer el exponente (si no, es un entero).
		//
		// NO se pone [+-]?, porque operaciones a+2 devolveria un a,+2, en vez de a,+,2

		PAR->m_oLiteralData.StrCpy(yytext) ;
		return RFN_LITERAL_FLOAT ; 
	}
	YY_BREAK
case 5:
YY_USER_ACTION
# line 96 "RFNLexer.l"
{ 

		//	LITERAL_STR
		//
		//Cualquier ocurrencia 'cadena' es un literal tipo texto. 
		//

		PAR->m_oLiteralData.ToASCIZ(yytext+1,yyleng-2) ;
		return RFN_LITERAL_STR ; 
	}
	YY_BREAK
case 6:
YY_USER_ACTION
# line 107 "RFNLexer.l"
{

	//LITERAL_BOOLEAN

	PAR->m_oLiteralData.StrCpy("1") ;

	return RFN_LITERAL_BOOLEAN ;
}
	YY_BREAK
case 7:
YY_USER_ACTION
# line 116 "RFNLexer.l"
{

	//LITERAL_BOOLEAN

	PAR->m_oLiteralData.StrCpy("0") ;

	return RFN_LITERAL_BOOLEAN ;
}
	YY_BREAK
case 8:
YY_USER_ACTION
# line 125 "RFNLexer.l"
{ 

		//	KEYWORDS
		//
		//	Definirlas ANTES de  IDENTIFIER_M, o pueden interpretarse como IDENTIDIER

		return RFN_NOT ; 
	} 
	YY_BREAK
case 9:
YY_USER_ACTION
# line 134 "RFNLexer.l"
{ return  RFN_HEADER ; } 
	YY_BREAK
case 10:
YY_USER_ACTION
# line 135 "RFNLexer.l"
{ return  RFN_OUTPUT_NAME; } 
	YY_BREAK
case 11:
YY_USER_ACTION
# line 136 "RFNLexer.l"
{ return  RFN_FONT_NAME ; } 
	YY_BREAK
case 12:
YY_USER_ACTION
# line 137 "RFNLexer.l"
{ return  RFN_FIXED ; } 
	YY_BREAK
case 13:
YY_USER_ACTION
# line 138 "RFNLexer.l"
{ return  RFN_PCL ; } 
	YY_BREAK
case 14:
YY_USER_ACTION
# line 139 "RFNLexer.l"
{ return  RFN_PSC ; } 
	YY_BREAK
case 15:
YY_USER_ACTION
# line 140 "RFNLexer.l"
{ return  RFN_RVW ; } 
	YY_BREAK
case 16:
YY_USER_ACTION
# line 141 "RFNLexer.l"
{ return  RFN_ESCP ; } 
	YY_BREAK
case 17:
YY_USER_ACTION
# line 142 "RFNLexer.l"
{ return  RFN_MAP_NAME ; } 
	YY_BREAK
case 18:
YY_USER_ACTION
# line 143 "RFNLexer.l"
{ return  RFN_DVC_FONT_ID ; } 
	YY_BREAK
case 19:
YY_USER_ACTION
# line 144 "RFNLexer.l"
{ return  RFN_DVC_CHARSET ; } 
	YY_BREAK
case 20:
YY_USER_ACTION
# line 145 "RFNLexer.l"
{ return  RFN_DVC_PITCH ; } 
	YY_BREAK
case 21:
YY_USER_ACTION
# line 146 "RFNLexer.l"
{ return  RFN_DVC_2Y ; } 
	YY_BREAK
case 22:
YY_USER_ACTION
# line 147 "RFNLexer.l"
{ return  RFN_DVC_2X ; } 
	YY_BREAK
case 23:
YY_USER_ACTION
# line 148 "RFNLexer.l"
{ return  RFN_DVC_COMPR ; } 
	YY_BREAK
case 24:
YY_USER_ACTION
# line 149 "RFNLexer.l"
{ return  RFN_DVC_SOFT_FONT ; } 
	YY_BREAK
case 25:
YY_USER_ACTION
# line 150 "RFNLexer.l"
{ return  RFN_DVC_SOFT_FONT_TRANS ; } 
	YY_BREAK
case 26:
YY_USER_ACTION
# line 151 "RFNLexer.l"
{ return  RFN_HEIGHT ; } 
	YY_BREAK
case 27:
YY_USER_ACTION
# line 152 "RFNLexer.l"
{ return  RFN_MAP_HEIGHT ; } 
	YY_BREAK
case 28:
YY_USER_ACTION
# line 153 "RFNLexer.l"
{ return  RFN_DVC_HEIGHT ; } 
	YY_BREAK
case 29:
YY_USER_ACTION
# line 154 "RFNLexer.l"
{ return  RFN_SELECTION_HEIGHT ; } 
	YY_BREAK
case 30:
YY_USER_ACTION
# line 155 "RFNLexer.l"
{ return  RFN_DESIGN_HEIGHT; } 
	YY_BREAK
case 31:
YY_USER_ACTION
# line 156 "RFNLexer.l"
{ return  RFN_DESIGN_WIDTH; } 
	YY_BREAK
case 32:
YY_USER_ACTION
# line 157 "RFNLexer.l"
{ return  RFN_FOR_ALL; } 
	YY_BREAK
case 33:
YY_USER_ACTION
# line 159 "RFNLexer.l"
{ return  RFN_ALL ; } 
	YY_BREAK
case 34:
YY_USER_ACTION
# line 160 "RFNLexer.l"
{ return  RFN_BOLD_ON ; } 
	YY_BREAK
case 35:
YY_USER_ACTION
# line 161 "RFNLexer.l"
{ return  RFN_BOLD_OFF; } 
	YY_BREAK
case 36:
YY_USER_ACTION
# line 162 "RFNLexer.l"
{ return  RFN_BOLD_ALL; } 
	YY_BREAK
case 37:
YY_USER_ACTION
# line 163 "RFNLexer.l"
{ return  RFN_ITALIC_ON ; } 
	YY_BREAK
case 38:
YY_USER_ACTION
# line 164 "RFNLexer.l"
{ return  RFN_ITALIC_OFF; } 
	YY_BREAK
case 39:
YY_USER_ACTION
# line 165 "RFNLexer.l"
{ return  RFN_ITALIC_ALL; } 
	YY_BREAK
case 40:
YY_USER_ACTION
# line 166 "RFNLexer.l"
{ return  RFN_UNDERLINE_ON ; } 
	YY_BREAK
case 41:
YY_USER_ACTION
# line 167 "RFNLexer.l"
{ return  RFN_UNDERLINE_OFF; } 
	YY_BREAK
case 42:
YY_USER_ACTION
# line 168 "RFNLexer.l"
{ return  RFN_UNDERLINE_ALL; } 
	YY_BREAK
case 43:
YY_USER_ACTION
# line 170 "RFNLexer.l"
{ 
		// OPERATORS 

		return RFN_OPEN_BLOCK ; 
	}
	YY_BREAK
case 44:
YY_USER_ACTION
# line 175 "RFNLexer.l"
{ return RFN_CLOSE_BLOCK ; }
	YY_BREAK
case 45:
YY_USER_ACTION
# line 176 "RFNLexer.l"
{ return RFN_OPE_LET ; }
	YY_BREAK
case 46:
YY_USER_ACTION
# line 178 "RFNLexer.l"
{ /* do nothing */ }
	YY_BREAK
case 47:
YY_USER_ACTION
# line 179 "RFNLexer.l"

	YY_BREAK
case 48:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_USER_ACTION
# line 180 "RFNLexer.l"
{ /* do nothing */; }
	YY_BREAK
case 49:
YY_USER_ACTION
# line 181 "RFNLexer.l"
{ printf("<ERROR, invalid char %c>\n", (char)yytext[0]); }
	YY_BREAK
case 50:
YY_USER_ACTION
# line 183 "RFNLexer.l"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = yy_cp - yytext_ptr - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
							yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr - 1; /* copy prev. char, too */
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = yy_c_buf_p - yytext_ptr;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset = yy_c_buf_p - b->yy_ch_buf;

			b->yy_buf_size *= 2;
			b->yy_ch_buf = (char *)
				yy_flex_realloc( (void *) b->yy_ch_buf,
						 b->yy_buf_size );

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move - YY_MORE_ADJ == 1 )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	/* yytext begins at the second character in yy_ch_buf; the first
	 * character is the one which preceded it before reading in the latest
	 * buffer; it needs to be kept around in case it's a newline, so
	 * yy_get_previous_state() will have with '^' rules active.
	 */

	yytext_ptr = &yy_current_buffer->yy_ch_buf[1];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 203 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 203 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 202);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += dest - source;
		yy_bp += dest - source;
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
		yy_cp[-2] = '\n';

	*--yy_cp = (char) c;


	/* Note: the formal parameter *must* be called "yy_bp" for this
	 * macro to now work correctly.
	 */
	YY_DO_BEFORE_ACTION; /* set up yytext again */
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );

	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );

	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	yy_flex_free( (void *) b->yy_ch_buf );
	yy_flex_free( (void *) b );
	}


void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )
	{
	b->yy_input_file = file;

	/* We put in the '\n' and start reading from [1] so that an
	 * initial match-at-newline will be true.
	 */

	b->yy_ch_buf[0] = '\n';
	b->yy_n_chars = 1;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[1];

	b->yy_is_interactive = 0;

	b->yy_fill_buffer = 1;

	b->yy_buffer_status = YY_BUFFER_NEW;
	}


void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		int new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}


void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}


int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}



void yyFlexLexer::LexerError( const char msg[] )
	{
	cerr << msg << '\n';
	exit( 1 );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, const char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
const char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( unsigned int size )
#else
static void *yy_flex_alloc( size )
unsigned int size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, unsigned int size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
unsigned int size;
#endif
	{
	return (void *) realloc( ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}
# line 183 "RFNLexer.l"


/* 
*************************************************************************************************
*										PROGRAM SECTION											*
************************************************************************************************* 
*/

#include "flexlexer.h"
              



