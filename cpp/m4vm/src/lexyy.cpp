/* A lexical scanner generated by flex */

#include "flexlexer.h"

#include "vmres.hpp"
#include "gram_tab.h"
#include "parser.h"

#include "chlog.hpp"

//Tamaño de "resize" para un LITERAL en el analizador lexico.
#define M4CL_VM_LEX_LITERAL_RESIZE						64

#define FLEX_SCANNER



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
//class istream;
#ifdef _UNIX
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#ifdef __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */


#ifdef __TURBOC__
#define YY_USE_CONST
#endif


#ifndef YY_USE_CONST
#ifndef const
#define const
#endif
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.
 */
#define YY_START ((yy_start - 1) / 2)

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file".  Now included
 * only for backward compatibility with previous versions of flex.
 */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#ifdef __cplusplus
extern "C" {
#endif
	extern int yywrap YY_PROTO(( void ));
#ifdef __cplusplus
	}
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

//#define yyless(n) \
//	do \
//		{ \
//		/* Undo effects of setting up yytext. */ \
//		*yy_cp = yy_hold_char; \
//		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
//		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
//		} \
//	while ( 0 )

// El prepocesador aCC de HP-UX no entiende la barra \ 
// con ficheros en formato MS-DOS, asi que la escribimos en una sola linea
// arriba esta comentada la original
#define yyless(n)	do	{*yy_cp = yy_hold_char;	yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; YY_DO_BEFORE_ACTION;}	while ( 0 )


#define unput(c) yyunput( c, yytext_ptr )


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( unsigned int ));
static void *yy_flex_realloc YY_PROTO(( void *, unsigned int ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define INITIAL 0
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <flexlexer.h>

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, const char *, int ));
#endif



/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */

/*
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;
*/
// El prepocesador aCC de HP-UX no entiende la barra \ 
// con ficheros en formato MS-DOS, asi que la escribimos en una sola linea
// arriba esta comentada la original
#define YY_DO_BEFORE_ACTION		yytext_ptr = yy_bp; yyleng = yy_cp - yy_bp; yy_hold_char = *yy_cp; *yy_cp = '\0'; yy_c_buf_p = yy_cp;


#define YY_END_OF_BUFFER 45
static const short int yy_accept[121] =
    {   0,
        0,    0,   45,   43,   40,   37,   27,   36,   32,   32,
       41,   25,   23,   24,   29,   26,   33,   33,   31,   18,
       14,   17,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   44,   44,   39,   32,   32,   32,
       28,   38,   42,   33,   33,    0,    0,   30,   16,   19,
       15,   32,   11,   32,   32,   32,    1,   32,   32,   21,
       32,   32,    9,   32,   32,   32,    0,    0,   32,   33,
        0,   33,   34,   20,   32,   32,    8,   32,   22,   32,
       32,   32,   32,   32,    0,    3,   32,   10,   32,    2,
       32,    7,   32,    0,   32,    5,   32,   13,    6,    0,

        4,   12,    0,    0,    0,    0,    0,    0,    0,   35,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0
    } ;

static const int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    1,    8,    9,    1,
        1,   10,   11,    1,   12,   13,   14,   15,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,    1,   18,
       19,   20,    1,    8,   21,   22,   22,   23,   24,   25,
        8,   26,   27,    8,    8,   28,    8,   29,   30,   31,
        8,   32,   33,   34,   35,    8,   36,   37,    8,    8,
        1,    1,    1,    1,    8,    1,   21,   22,   22,   23,

       24,   25,    8,   26,   27,    8,    8,   28,    8,   29,
       30,   31,    8,   32,   33,   34,   35,    8,   36,   37,
        8,    8,   38,    1,   39,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const int yy_meta[41] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    2,    1,    1,
        1,    3,    1,    1,    4,    4,    1,    1,    1,    1,
        4,    4,    4,    4,    4,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    1,    1,    1
    } ;

static const short int yy_base[125] =
    {   0,
        0,    0,  115,  318,  318,  318,  318,  318,   29,   31,
      318,  318,  318,  318,   96,   38,   38,   42,   87,   30,
      318,   83,   44,   49,   55,   48,   57,   63,   40,   52,
       66,   70,   60,   77,   95,  318,  318,   79,    0,    0,
      318,  318,  318,   97,  101,  107,    0,  318,  318,  318,
      318,  101,   98,  103,  105,  109,  111,  114,  116,  118,
      120,  128,  130,  132,  134,  140,  162,  155,    0,  157,
      159,  164,    0,  154,  160,  158,  162,  164,  166,  168,
      171,  177,  179,  181,  196,  186,  191,  189,  193,  195,
      198,  200,  206,  216,  208,  210,  212,  214,  216,   62,

      218,  220,  235,  237,   51,  239,  241,  256,  257,  318,
      245,  260,  261,  249,  251,  266,  254,  259,  269,  318,
      307,  310,  313,   38
    } ;

static const short int yy_def[125] =
    {   0,
      120,    1,  120,  120,  120,  120,  120,  120,  121,  121,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  121,  121,  121,   25,   25,   25,   25,   25,
       25,   25,   25,   25,  120,  120,  120,   25,  122,  123,
      120,  120,  120,  120,  120,  120,  124,  120,  120,  120,
      120,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,  120,  120,  122,  120,
      120,  120,  124,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,  120,   25,   25,   25,   25,   25,
       25,   25,   25,  120,   25,   25,   25,   25,   25,  120,

       25,   25,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,    0,
      120,  120,  120,  120
    } ;

static const short int yy_nxt[359] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   10,   24,   25,   26,   10,   27,   10,   28,   29,
       30,   31,   10,   32,   33,   34,   10,   35,   36,   37,
       39,   73,  120,   40,   40,   40,   40,   42,   49,   50,
       44,   43,   45,   45,   44,  120,   45,   45,   40,   40,
      120,   46,  106,   40,   40,   46,  120,   38,   38,   40,
       40,   60,   52,  103,   47,   38,   38,   56,   53,   38,
       38,   57,   54,   55,   38,   38,   58,   38,   64,   61,
       38,   38,   59,   38,   38,   62,   67,   38,   38,   63,

       65,   51,   66,   48,   38,   38,   38,   38,   41,   68,
       68,   70,   70,   44,  120,   45,   45,   71,   71,  120,
       46,   72,   72,   74,   46,   38,   38,   76,   38,   38,
       38,   38,   38,   38,  120,   75,   38,   38,   38,   38,
       77,   38,   38,   38,   38,   38,   38,   38,   38,   79,
       78,   81,  120,   80,  120,   38,   38,   38,   38,   38,
       38,   38,   83,   67,  120,   82,   84,   38,   38,   85,
       85,   70,   70,   72,   72,  120,   68,   68,   72,   72,
       46,   38,   38,   86,   87,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   88,   38,   90,

      120,   92,   89,   91,   38,   38,   38,   38,   93,   38,
       94,   94,   95,   38,   38,   96,   38,   38,   38,   38,
       38,   38,   38,   38,   97,   98,   38,   38,   38,   99,
      100,  100,  101,   38,   38,   38,   38,   38,   38,   38,
      102,   38,   38,   38,   38,   38,   38,   38,   38,  104,
      104,  105,  105,  107,  107,  108,  108,  109,  109,  112,
      112,  113,  113,  115,  115,  116,  116,  113,  118,  118,
      113,  111,  111,  119,  119,  120,  114,  120,  120,  120,
      120,  120,  117,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  110,  110,  120,  120,  110,  110,

      120,  120,  120,  120,  110,  120,  120,  110,   38,   38,
       38,   69,  120,   69,   40,  120,   40,    3,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120
    } ;

static const short int yy_chk[359] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        9,  124,   10,    9,    9,   10,   10,   16,   20,   20,
       17,   16,   17,   17,   18,   23,   18,   18,   23,   23,
       24,   17,  105,   24,   24,   18,   25,   29,   29,   25,
       25,   29,   23,  100,   17,   26,   26,   26,   24,   30,
       30,   27,   25,   25,   27,   27,   28,   33,   33,   31,
       28,   28,   28,   31,   31,   32,   35,   32,   32,   32,

       34,   22,   34,   19,   34,   34,   38,   38,   15,   35,
       35,   44,   44,   45,    3,   45,   45,   46,   46,    0,
       44,   46,   46,   52,   45,   53,   53,   55,   52,   52,
       54,   54,   55,   55,    0,   54,   56,   56,   57,   57,
       56,   58,   58,   59,   59,   60,   60,   61,   61,   59,
       58,   62,    0,   61,    0,   62,   62,   63,   63,   64,
       64,   65,   65,   67,    0,   64,   66,   66,   66,   68,
       68,   70,   70,   71,   71,    0,   67,   67,   72,   72,
       70,   74,   74,   75,   76,   76,   76,   75,   75,   77,
       77,   78,   78,   79,   79,   80,   80,   78,   81,   81,

        0,   83,   80,   82,   82,   82,   83,   83,   84,   84,
       85,   85,   86,   86,   86,   87,   88,   88,   87,   87,
       89,   89,   90,   90,   89,   91,   91,   92,   92,   93,
       94,   94,   95,   93,   93,   95,   95,   96,   96,   97,
       97,   98,   98,   99,   99,  101,  101,  102,  102,  103,
      103,  104,  104,  106,  106,  107,  107,  108,  109,  111,
      111,  112,  113,  114,  114,  115,  115,  116,  117,  117,
      119,  109,  109,  118,  118,    0,  112,    0,    0,    0,
        0,    0,  116,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  108,  109,    0,    0,  112,  113,

        0,    0,    0,    0,  116,    0,    0,  119,  121,  121,
      121,  122,    0,  122,  123,    0,  123,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#include <stdio.h>
//#include <string.h>
#include "m4string.hpp"
#include <ctype.h> 

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
 /*
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
*/
// El prepocesador aCC de HP-UX no entiende la barra \ 
// con ficheros en formato MS-DOS, asi que la escribimos en una sola linea
// arriba esta comentada la original

#define YY_INPUT(buf,result,max_size) 	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) 	YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;



	if ( yy_init )
		{
#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( yy_current_buffer )
			yy_init_buffer( yy_current_buffer, yyin );
		else
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();

		yy_init = 0;
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 121 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 318 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_USER_ACTION
{
		    return IF;
		    }
	YY_BREAK
case 2:
YY_USER_ACTION
{
		    return THEN;
		    }
	YY_BREAK
case 3:
YY_USER_ACTION
{
		    return ELSE;
		    }
	YY_BREAK
case 4:
YY_USER_ACTION
{
					return ELSEIF;
					}
	YY_BREAK
case 5:
YY_USER_ACTION
{
		    return ENDIF;
		    }
	YY_BREAK
case 6:
YY_USER_ACTION
{
		    return WHILE;
		    }
	YY_BREAK
case 7:
YY_USER_ACTION
{
		    return WEND;
		    }
	YY_BREAK
case 8:
YY_USER_ACTION
{
		    return FOR;
		    }
	YY_BREAK
case 9:
YY_USER_ACTION
{
		    return TO;
		    }
	YY_BREAK
case 10:
YY_USER_ACTION
{
		    return NEXT;
		    }
	YY_BREAK
case 11:
YY_USER_ACTION
{
		    return DO; 
		    }
	YY_BREAK
case 12:
YY_USER_ACTION
{
		    return RETURN;
		    }
	YY_BREAK
case 13:
YY_USER_ACTION
{
		    return UNTIL;
		    }
	YY_BREAK
case 14:
YY_USER_ACTION
{
					return IGUAL;
					}
	YY_BREAK
case 15:
YY_USER_ACTION
{
					return MAYIGUAL;
					}
	YY_BREAK
case 16:
YY_USER_ACTION
{
					return MENIGUAL;
					}
	YY_BREAK
case 17:
YY_USER_ACTION
{
					return MAYOR;
					}
	YY_BREAK
case 18:
YY_USER_ACTION
{
					return MENOR;
					}
	YY_BREAK
case 19:
YY_USER_ACTION
{
					return DISTINTO;
					}
	YY_BREAK
case 20:
YY_USER_ACTION
{
					return AND;
					}
	YY_BREAK
case 21:
YY_USER_ACTION
{
					return OR;
					}
	YY_BREAK
case 22:
YY_USER_ACTION
{
					return NOT;
					}
	YY_BREAK
case 23:
YY_USER_ACTION
{
					return MAS;
					}
	YY_BREAK
case 24:
YY_USER_ACTION
{
					return MENOS;
					}
	YY_BREAK
case 25:
YY_USER_ACTION
{
					return MULTI;
					}
	YY_BREAK
case 26:
YY_USER_ACTION
{
					return DIVIDE;
					}
	YY_BREAK
case 27:
YY_USER_ACTION
{
					return ACCCHANNEL;
					}
	YY_BREAK
case 28:
YY_USER_ACTION
{
					return ACCATRIB;
					}
	YY_BREAK
case 29:
YY_USER_ACTION
{
					return ACCMIEMBRO;
					}
	YY_BREAK
case 30:
YY_USER_ACTION
{
					return ACCPADRE;
					}
	YY_BREAK
case 31:
YY_USER_ACTION
{
					return SEPINST;
					}
	YY_BREAK
case 32:
YY_USER_ACTION
{
					strncpy(yylval.str,(char*)yytext,MAX_TOKEN);
					yylval.str[MAX_TOKEN-1]='\0';
					if (m_poTrad!=NULL)
					{
						m4int32_t p,ilen=strlen(yytext);
						
						p=(((istrstream *)yyin)->rdbuf())->in_avail();
						m_poTrad->PushIdentifier((m4char_t *)yytext,p,ilen);
					}
					return IDENTIFICADOR;
		    }
	YY_BREAK
case 33:
YY_USER_ACTION
{
	if (strlen((char*)yytext) >MAX_TOKEN-11 ){//el -10: el 'punto', los 8 decimales, el signo, y el /0.
			m_poTrad->GetpParser()->yyerror("number to long",M4_CH_VM_COMP_NUMBER_TOO_BIG);
			return EOF2;//->Forzamos la salida del parser
	}
	
	m4double_t dNumber   = atof((char*)yytext); 
	m4double_t dNumberAbs= fabs(dNumber);

	if (dNumberAbs > 1e244  ){//el -11: el 'punto', los 8 decimales, el signo, el /0 y uno que se come el truncado del logaritmo
		
		m_poTrad->GetpParser()->yyerror("number to long",M4_CH_VM_COMP_NUMBER_TOO_BIG);
		return EOF2;//->Forzamos la salida del parser
	
	}
			
	
	sprintf((char*)&yylval,"%.8lf", dNumber );
	return NUMERO;		    
	}
	YY_BREAK
case 34:
YY_USER_ACTION
{
					int iTemp;
					
					sscanf((char*)yytext,"%x",&iTemp);
					sprintf((char*)&yylval,"%.8lf",(float)iTemp);
		    return NUMERO;
					}
	YY_BREAK
case 35:
YY_USER_ACTION
{
					char *pszTemp;
					char *pszTemp2;
					
					pszTemp=yytext+1;
					while (isspace(*pszTemp)) pszTemp++;
					
					pszTemp2=pszTemp+strlen(pszTemp)-2;
					while (isspace(*pszTemp2)) pszTemp2--;

					strncpy(yylval.str,(char*)pszTemp,(char*)pszTemp2-(char*)pszTemp+1);
                    yylval.str [ (char*)pszTemp2-(char*)pszTemp+1 ]=0;
					yylval.str[MAX_TOKEN-1]='\0';
		    return FECHA;
		    } 
	YY_BREAK
case 36:
YY_USER_ACTION
{
					//Reservo espacio dinamico: no compruebo memoria
					//que libero en TRAD.CPP - ClTrad::StoreString(...)
					//yylval.pstr = new char[yyleng-1];
					//strncpy(yylval.pstr,(char*)yytext+1,yyleng-2);
					//yylval.pstr[yyleng-2]='\0';
					//return LITERAL;

					yylval.hString = 0;
					int Aux_yyleng=0, Aux_SizeBuffer=M4CL_VM_LEX_LITERAL_RESIZE;
					char cTemp=yyinput();	//First char
					char *Aux_pstr = new char[Aux_SizeBuffer+1];	//Buffer temporal redimensionable
					while (1) {
						if (cTemp=='"') {
							Aux_pstr[Aux_yyleng]='\0';
							break;	//Fin de cadena
						}
						else if (cTemp=='\r') {
							if ( (cTemp=yyinput())=='\n' ) {
								m_poTrad->GetpParser()->yyerror("string without close",M4_CH_VM_COMP_STRING_NOT_CLOSED);
								if (Aux_pstr) delete []Aux_pstr;
								return EOF2;	//Fin de linea sin comillas => forzamos error en el parser
							}else {
								//Falso fin de linea => recuperarnos
								//Redimensionamos buffer, si es necesario
								if (Aux_yyleng >= Aux_SizeBuffer) {
									Aux_SizeBuffer += M4CL_VM_LEX_LITERAL_RESIZE;
									char *pAuxstr = new char[Aux_SizeBuffer+1];
									memcpy(pAuxstr, Aux_pstr, Aux_SizeBuffer-M4CL_VM_LEX_LITERAL_RESIZE);
									if (Aux_pstr) delete [] Aux_pstr;
									Aux_pstr = pAuxstr;
								}
								Aux_pstr[Aux_yyleng++] = '\r';
							}
						}
						else if (cTemp==EOF) {
							if (Aux_pstr) delete [] Aux_pstr;	//Liberamos memoria
							break;	//Fin de parser sin comillas => Parser genera error
						}
						//Redimensionamos buffer, si es necesario
						if (Aux_yyleng >= Aux_SizeBuffer) {
							Aux_SizeBuffer += M4CL_VM_LEX_LITERAL_RESIZE;
							char *pAuxstr = new char[Aux_SizeBuffer+1];
							memcpy(pAuxstr, Aux_pstr, Aux_SizeBuffer-M4CL_VM_LEX_LITERAL_RESIZE);
							if (Aux_pstr) delete [] Aux_pstr;
							Aux_pstr = pAuxstr;
						}
						Aux_pstr[Aux_yyleng++] = cTemp;
						cTemp=yyinput();	//Next char
					}

					if (cTemp=='"') {
						m_oDynamicPool->AddString(Aux_pstr, yylval.hString) ;	//DeleteString en "StoreString()" (parser.cpp)
						delete [] Aux_pstr;
						return LITERAL;
					}
		    }
	YY_BREAK
case 37:
YY_USER_ACTION
{
					iNumLine++;
		    return NL;
		    }
	YY_BREAK
case 38:
YY_USER_ACTION
{
					int iTemp;
					int ret=0;

					loop:
						iTemp = yyinput();

					loop2:
						// nos comemos el comentario, hasta encontrar un caracter especial
						// BUG 0078309: Hay que ignorar los \r
						while (iTemp!='*' && iTemp!='\n' && iTemp!=EOF)
							iTemp = yyinput();

						// segun el caracter
						switch (iTemp) {
						case EOF:
							return NL;

						case '\n':
							iNumLine++;
							ret=1;
							break;

						case '*':
							// leemos 1 mas
							iTemp=yyinput();
							if (iTemp=='/') {
								goto loopExit;
							} else {
								// backtracking
								//unput(iTemp);
								goto loop2;
							}
							break;

						//default:
							// nos comemos el caracter
						}
						goto loop;

					loopExit:
					if (ret) return NL;
			
			/*
					// Solucion antigua
					int iTemp;
					int ret;
					ret=0;
				loop: iTemp=yyinput();
					
						
					while (iTemp!='*' && iTemp!='\r' && iTemp!=EOF) 
						iTemp=yyinput();
					if (iTemp==EOF)
					   return NL;
					//while (yyinput()!='*') ;
					if (iTemp=='\r' && (iTemp=yyinput())=='\n') {
						iNumLine++;
						ret=1;
						goto loop;
					}

					switch (yyinput()){

						case '/': break;
						case '*': unput ('*');
							
						default: goto loop;
					}
			
					if (ret) return NL;
			*/

			}
	YY_BREAK
case 39:
YY_USER_ACTION
{
		    return EOF2;
		    }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
{
		    return EOF2;
		    }
	YY_BREAK
case 40:
YY_USER_ACTION
{/*los comemos*/
					}
	YY_BREAK
case 41:
YY_USER_ACTION
{
					/* 
						"'"[^\r\n]*{nl} {
						Comentarios "'" de 1 linea: 'comentario
						iNumLine++;
						return NL;
					*/
					int iTemp=yyinput();	//Next char
					
					loop_3:
					// BUG 0078309: Hay que ignorar los \r
					while (iTemp!='\n' && iTemp!=EOF) 
						iTemp=yyinput();
					
					if (iTemp==EOF)
					   return NL;
					
					if (iTemp=='\n') {
						iNumLine++;
						return NL;
					}
					goto loop_3;	//seguimos comiendo chars
					}
	YY_BREAK
case 42:
YY_USER_ACTION
{
					/*
						"//"[^\r\n]*{nl}        {
						Comentarios "//" de 1 linea: //comentario
						iNumLine++;
						return NL;
					*/
					int iTemp=yyinput();	//Next char
					
					loop_4:
					// BUG 0078309: Hay que ignorar los \r
					while (iTemp!='\n' && iTemp!=EOF) 
						iTemp=yyinput();
					
					if (iTemp==EOF)
					   return NL;
					
					if (iTemp=='\n') {
						iNumLine++;
						return NL;
					}
					goto loop_4;	//seguimos comiendo chars
					}
	YY_BREAK
case 43:
YY_USER_ACTION
return ((unsigned char)*yytext);
	YY_BREAK
case 44:
YY_USER_ACTION
//ECHO;
return ((unsigned char)*yytext); //la accion por defecto es retornar el codigo, no volcarlo a stdout
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = yy_cp - yytext_ptr - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
							yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr - 1; /* copy prev. char, too */
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = yy_c_buf_p - yytext_ptr;

	//Optimizacion en "compilacion"
	if (dest == source) {
		//No movemos el bloque de 'source' a 'dest', simplemente incrementamos los punteros.
		source += number_to_move;
		dest   = source;
	}
	else {
		for ( i = 0; i < number_to_move; ++i )
			*(dest++) = *(source++);
	}

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset = yy_c_buf_p - b->yy_ch_buf;

			b->yy_buf_size *= 2;
			b->yy_ch_buf = (char *)
				yy_flex_realloc( (void *) b->yy_ch_buf,
						 b->yy_buf_size );

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move - YY_MORE_ADJ == 1 )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	/* yytext begins at the second character in yy_ch_buf; the first
	 * character is the one which preceded it before reading in the latest
	 * buffer; it needs to be kept around in case it's a newline, so
	 * yy_get_previous_state() will have with '^' rules active.
	 */

	yytext_ptr = &yy_current_buffer->yy_ch_buf[1];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 40);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 121 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 40;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 121 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 120);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += dest - source;
		yy_bp += dest - source;
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
		yy_cp[-2] = '\n';

	*--yy_cp = (char) c;


	/* Note: the formal parameter *must* be called "yy_bp" for this
	 * macro to now work correctly.
	 */
	YY_DO_BEFORE_ACTION; /* set up yytext again */
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );

	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );

	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	yy_flex_free( (void *) b->yy_ch_buf );
	yy_flex_free( (void *) b );
	}


void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )
	{
	b->yy_input_file = file;

	/* We put in the '\n' and start reading from [1] so that an
	 * initial match-at-newline will be true.
	 */

	b->yy_ch_buf[0] = '\n';
	b->yy_n_chars = 1;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[1];

	b->yy_is_interactive = 0;

	b->yy_fill_buffer = 1;

	b->yy_buffer_status = YY_BUFFER_NEW;
	}


void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		int new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}


void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}


int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}



void yyFlexLexer::LexerError( const char msg[] )
	{
	//cerr << msg << '\n';
	g_oChLog<<BeginError(M4_CH_VM_LEXER_ERROR)<<msg<<EndLog;
	//exit( 1 );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless

//#define yyless(n) \
//	do \
//		{ \
//		/* Undo effects of setting up yytext. */ \
//		yytext[yyleng] = yy_hold_char; \
//		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
//		yy_hold_char = *yy_c_buf_p; \
//		*yy_c_buf_p = '\0'; \
//		yyleng = n; \
//		} \
//	while ( 0 )

// El prepocesador aCC de HP-UX no entiende la barra \ 
// con ficheros en formato MS-DOS, asi que la escribimos en una sola linea
// arriba esta comentada la original

#define yyless(n) 	do 	{ yytext[yyleng] = yy_hold_char; yy_c_buf_p = yytext + n - YY_MORE_ADJ; yy_hold_char = *yy_c_buf_p; *yy_c_buf_p = '\0'; yyleng = n; } while ( 0 )



/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, const char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
const char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( unsigned int size )
#else
static void *yy_flex_alloc( size )
unsigned int size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, unsigned int size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
unsigned int size;
#endif
	{
	return (void *) realloc( ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}
