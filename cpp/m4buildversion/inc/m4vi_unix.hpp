//==============================================================================
//
//	 (c) Copyright  1991-1997 Meta Software M.S., S.A
//	 All rights reserved.
//
//	 File:              m4vi_unix
//	 Project:           m4versioninfo
//	 Author:            Meta Software M.S., S.A
//	 Date:
//	 Language:          C++
//	 Operating System:  UNIX (HP, DEC, AIX, SUN)
//	 Design Document:
//
//	 Definition: Implementation for classes defined in
//		m4versioninfo.hpp
//
//	 Samples: See m4versioninfo.hpp file.
//
//=============================================================================

#if defined (M4_UNIX_RESOURCES)

#include <ospace/std/iostream>
#include <ospace/std/iomanip>
#include <ctype.h>
#include "m4trace.hpp"

//===========================================================================
// Struct: M4_VAR.
// Description: This struct represent the internal container for the
//	version info in the UNIX platform.
//	This struct is defined too in the source file generated by the
//	resources compiler (a perl script).
//===========================================================================
typedef struct {
   char *szkey;
   char *value;
   int array_size;
} M4_VAR;


//===========================================================================
// Class: M4_VS_FIXEDFILEINFO.
//===========================================================================
inline ostream& operator<<(ostream &aio_os, const M4_VS_FIXEDFILEINFO* ai_vi_fixedfileinfo)
{
	m4TraceLevel(11, cout << "M4_VS_FIXEDFILEINFO:" << endl);
	
	aio_os << "M4_VS_FIXEDFILEINFO:" << endl;
	return aio_os;
}


//===========================================================================
// Class: M4_VS_VERSION_INFO.
//===========================================================================
inline ostream& operator<<(ostream &aio_os, const M4_VS_VERSION_INFO* ai_vs_version_info)
{
	m4TraceLevel(11, cout << "M4_VS_VERSION_INFO: operator<<" << endl);
	
	if (NULL == ai_vs_version_info)
	{
		m4TraceLevel(12, cout << "M4_VS_VERSION_INFO: NULL argument." << endl);
		return aio_os;
	}
	
	// get version information in a valid struct array.
	const M4_VAR* versionInfo = (M4_VAR*)ai_vs_version_info;
	int nValues = versionInfo[0].array_size;
	m4TraceLevel(12, cout << "M4_VS_VERSION_INFO: nValues: " << nValues << endl);
	
	// print version info.
	for (int i=0; i<nValues; i++)
	{
		m4TraceLevel(12, cout << "M4_VS_VERSION_INFO: " << versionInfo[i].szkey << " : " << versionInfo[i].value << endl);
		aio_os << setw(20) << versionInfo[i].szkey << ": " << versionInfo[i].value << endl;
	}
	return aio_os;
}


inline const char* M4_VS_VERSION_INFO::getVersionProperty(const char *ai_property, const char *ai_language, const char *ai_codepage) const
{
	m4TraceLevel(11, cout << "M4_VS_VERSION_INFO::getVersionProperty" << endl);
	
	// check input arguments
	if (NULL == ai_property)
	{
		m4TraceLevel(12, cout << "M4_VS_VERSION_INFO::getVersionProperty : NULL argument." << endl);
		return NULL;
	}
	
	// get version information in a valid struct array.
	const M4_VAR* versionInfo = (M4_VAR*)this;
	int nValues = versionInfo[0].array_size;
	m4TraceLevel(12, cout << "M4_VS_VERSION_INFO::getVersionProperty : nValues: " << nValues << endl);
	
	// convert ai_property to lowercase.
	char *p;
	char propertyLowercase[1024], keyLowercase[1024];
	strcpy(propertyLowercase, ai_property);
	p = propertyLowercase;
	while (*p != '\0')
	{
		*p = tolower(*p);
		p++;
	}
	
	// print version info.
	for (int i=0; i<nValues; i++)
	{
		m4TraceLevel(12, cout << "M4_VS_VERSION_INFO::getVersionProperty " << versionInfo[i].szkey << " : " << versionInfo[i].value << endl);

		// convert szkey to lowercase.
		strcpy(keyLowercase, versionInfo[i].szkey);
		p = keyLowercase;
		while (*p != '\0')
		{
			*p = tolower(*p);
			p++;
		}
		
		if (!strcmp(keyLowercase, propertyLowercase))
		{
			return versionInfo[i].value;
		}
	}
	
	// this property was not found.
	m4TraceLevel(12, cout << "M4_VS_VERSION_INFO::getVersionProperty : property " << ai_property << " not found." << endl);	
	return NULL;
}


//===========================================================================
// Macro: M4GetComponentVersionInformation.
// Description: This macro return a pointer to the variable that holds
//	the version information for the given component.
//===========================================================================

#define M4GetComponentVersionInformation(VS_VI_VAR, M4_VI_COMPONENT) \
	{ \
	extern void *##M4_VI_COMPONENT##_versionInfo_pointer; \
	(VS_VI_VAR = (const M4_VS_VERSION_INFO*)##M4_VI_COMPONENT##_versionInfo_pointer); \
	}


#endif // M4_UNIX_RESOURCES
