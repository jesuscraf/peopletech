
//==============================================================================
//
// (c) Copyright  1991-1997 Meta Software M.S., S.A
// All rights reserved.
//
// Module:              m4mdrt.dll
// File:                m4mdrtpt.cpp   
// Project:             mind3.x      
// Author:              Meta Software M.S. , S.A
// Date:                03-03-2000
// Language:            C++
// Operating System:    WINDOWS
// Design Document:     XXX.DOC
//
//
// Definition:
//
//    Este modulo define las funciones de impresión del metacanal compilado
//    
//
//
//==============================================================================


#include "m4mdrt.hpp"

#include "m4lang.hpp"
#include "m4objglb.hpp"
#include "cllstr.hpp"
#include "m4lang.hpp"
#include "m4unicode.hpp"



// Impresion de los elementos =====================================================

m4return_t  ClCompiledMCR :: _PrintCode( m4pcchar_t ai_pccCode, m4uint32_t ai_iItemHandle, m4uint16_t ai_iRulePosition, ClLongString &ao_roString, FILE* ai_pfFile, m4uint8_t ai_iIndent )
{

	m4return_t	iResult ;

	m4uint8_t	i8Number ;
	m4uint32_t	i32Number ;
	m4date_t	dDate ;
    m4pcchar_t  pccString ;

	m4uint8_t	iType ;
	m4uint8_t	iAutoGenerated ;
    m4uint16_t  i ;
    m4char_t	acDate[ M4_SECOND_END + 1 ] ;

    m4char_t    acIndent[ 10 ] ;


    for( i = 0 ; i < ai_iIndent ; i++ )
    {
        acIndent[ i ] = '\t' ;
    }

    acIndent[ i ] = '\0' ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============= Formula =============\n" ) ;
	
    pccString = GetItemFormIdByPosition( ai_iItemHandle, ai_iRulePosition ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Rule Id: <%s>\n", pccString ) ;

    dDate = GetCodeStartDate( ai_pccCode ) ;
    ClDateToString( dDate, acDate, M4_SECOND_END + 1 ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Start Date: <%s>\n", acDate ) ;

    dDate = GetCodeEndDate( ai_pccCode ) ;
    ClDateToString( dDate, acDate, M4_SECOND_END + 1 ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "End Date: <%s>\n", acDate ) ;

    pccString = GetCodeRuleTiId( ai_pccCode ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Rule Ti Id: <%s>\n", pccString ) ;

	i32Number = GetCodeNumberOfVariales( ai_pccCode ) ;
	fprintf( ai_pfFile, acIndent ) ;
	fprintf( ai_pfFile, "Variables: <%d>\n", i32Number ) ;

	i8Number = GetCodeMustAssign( ai_pccCode ) ;
	pccString = M4ClBool( i8Number ) ;
	fprintf( ai_pfFile, acIndent ) ;
	fprintf( ai_pfFile, "Must assign: <%d - %s>\n", i8Number, pccString ) ;

	iAutoGenerated = GetCodeAutoGenerated( ai_pccCode ) ;
	pccString = M4ClBool( iAutoGenerated ) ;
	fprintf( ai_pfFile, acIndent ) ;
	fprintf( ai_pfFile, "AutoGenerated: <%d - %s>\n", iAutoGenerated, pccString ) ;

	i8Number = GetCodePriority( ai_pccCode ) ;
	fprintf( ai_pfFile, acIndent ) ;
	fprintf( ai_pfFile, "Priority: <%d>\n", i8Number ) ;

	iType = GetCodeType( ai_pccCode ) ;
	pccString = M4ClFormType( iType ) ;
	fprintf( ai_pfFile, acIndent ) ;
	fprintf( ai_pfFile, "Type: <%d - %s>\n", iType, pccString ) ;

	iType = GetCodeLevel( ai_pccCode ) ;
	fprintf( ai_pfFile, acIndent ) ;
	fprintf( ai_pfFile, "Level: <%d>\n", iType ) ;

	i32Number = GetCodeNumberOfInstructions( ai_pccCode ) ;
	fprintf( ai_pfFile, acIndent ) ;
	fprintf( ai_pfFile, "Instructions: <%d>\n", i32Number ) ;

	i32Number = GetCodeSize( ai_pccCode ) ;
	fprintf( ai_pfFile, acIndent ) ;
	fprintf( ai_pfFile, "Size: <%d>\n", i32Number ) ;

	// Si no es autogenerado no tiene código fuente
	if( iAutoGenerated == 1 )
	{
		ao_roString.Reset() ;
		iResult = GetCodeSource( ai_pccCode, ai_iItemHandle, ai_iRulePosition, ao_roString, M4MDRT_CODE_MODE_PLAIN, ai_iIndent + 1 ) ;

		if( iResult == M4_SUCCESS )
		{
			pccString = ao_roString.GetString() ;

			if( pccString != NULL )
			{
				fprintf( ai_pfFile, acIndent ) ;
				fprintf( ai_pfFile, "============= Code =============\n" ) ;

				fprintf( ai_pfFile, "%s", pccString ) ;

				fprintf( ai_pfFile, acIndent ) ;
				fprintf( ai_pfFile, "============= Code End =========\n" ) ;
			}
		}
	}


	// fin de la formula
	fprintf( ai_pfFile, acIndent ) ;
	fprintf( ai_pfFile, "========== Fin de Formula =========\n" ) ;

    return( M4_SUCCESS ) ;
}




m4return_t  ClCompiledMCR :: _PrintItem( m4uint32_t ai_iItemHandle, ClLongString &ao_roString, FILE* ai_pfFile, m4uint8_t ai_iIndent )
{

	m4uint8_t	i8Number ;
	m4uint16_t	i16Number ;
	m4uint32_t	i32Number ;
    m4date_t    dDate ;
    m4pcchar_t  pccString ;

    m4uint16_t  i, j ;
    m4uint16_t  iLength ;
    m4uint16_t  iSlices ;
    m4uint16_t  iFormulas ;
    m4int16_t	iNext ;
    m4int16_t	iTotal ;
    m4uint32_t  iItem ;
    m4uint32_t  i32Aux ;
    m4pcchar_t  pcAux ;
    m4char_t    acDate[ M4_SECOND_END + 1 ] ;
    m4char_t    acIndent[ 10 ] ;


    for( i = 0 ; i < ai_iIndent ; i++ )
    {
        acIndent[ i ] = '\t' ;
    }

    acIndent[ i ] = '\0' ;


    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ Item ============================================\n" ) ;

    i32Number = GetItemDefinitionHandle( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Definition Handle: <%d>\n", i32Number ) ;

    _PrintItemDefinition( ai_iItemHandle, ai_pfFile, ai_iIndent + 1 ) ;

    i32Number = GetItemNodeHandle( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;

    if( i32Number != 0 )
    {
        pccString = GetNodeId( i32Number ) ;
        fprintf( ai_pfFile, "Node Handle: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Node Handle: <%d>\n", i32Number ) ;
    }

    pccString = GetItemName( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Name: <%s>\n", pccString ) ;

    i32Number = GetItemSliceItem( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number == 0 )
    {
        fprintf( ai_pfFile, "Slice Item: <%d>\n", i32Number ) ;
    }
    else
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Slice Item: <%d - %s>\n", i32Number, pccString ) ;
    }

    i32Number = GetItemAuxItem( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number == 0 )
    {
        fprintf( ai_pfFile, "Auxiliar Item: <%d>\n", i32Number ) ;
    }
    else
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Auxiliar Item: <%d - %s>\n", i32Number, pccString ) ;
    }

    i32Number = GetItemAuxItemProrat( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number == 0 )
    {
        fprintf( ai_pfFile, "Auxiliar Item Prorating: <%d>\n", i32Number ) ;
    }
    else
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Auxiliar Item Prorating: <%d - %s>\n", i32Number, pccString ) ;
    }

    i32Number = GetItemSCRStart( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "SCR Start: <%d>\n", i32Number ) ;

    i32Number = GetItemInverseConnector( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0  && i32Number != m4uint32_t( -1 ) )
    {
        iItem = GetItemConnectorFatherItemHandle( i32Number ) ; 
        pccString = GetItemId( iItem ) ;
        i32Aux = GetItemNodeHandle( iItem ) ;
        pcAux = GetNodeId( i32Aux ) ;
        fprintf( ai_pfFile, "Inverse Connector: <%d - %d - %s.%s>\n", i32Number, iItem, pcAux, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Inverse Connector: <%d>\n", i32Number ) ;
    }
    
    i8Number = GetItemScope( ai_iItemHandle ) ;
    pccString = M4ClItemScope( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Scope: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetItemIsMyItem( ai_iItemHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Is My Item: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetItemCsType( ai_iItemHandle ) ;
    pccString = M4ClCsType( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Cs Type: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetItemSyncType( ai_iItemHandle ) ;
    pccString = M4ClSyncMode( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Sync Type: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetItemLevel( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Level: <%d>\n", i8Number ) ;

    iLength = GetItemNumberOfConnectedItems( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Connected Items: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "<%d>\n", i ) ;

        i32Number = GetItemConnectorHandleByPosition( ai_iItemHandle, i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tItem Connector Handle: <%d>\n", i32Number ) ;

        _PrintItemConn( i32Number, ai_pfFile, ai_iIndent + 1 ) ;
    }

    iLength = GetItemNumberOfConditionants( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Conditionants: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "<%d>\n", i ) ;

        i32Number = GetItemConditionantHandleByPosition( ai_iItemHandle, i ) ;
        pccString = GetItemId( i32Number ) ;
        i32Aux = GetItemNodeHandle( i32Number ) ;
        pcAux = GetNodeId( i32Aux ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tConditionant Handle: <%d %s.%s>\n", i32Number, pcAux, pccString ) ;
    }

    iLength = GetItemNumberOfDependents( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Dependents: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "<%d>\n", i ) ;

        i32Number = GetItemDependentHandleByPosition( ai_iItemHandle, i ) ;
        pccString = GetItemId( i32Number ) ;
        i32Aux = GetItemNodeHandle( i32Number ) ;
        pcAux = GetNodeId( i32Aux ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tDependent Handle: <%d %s.%s>\n", i32Number, pcAux, pccString ) ;
    }

    iLength = GetItemNumberOfAssigned( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Assigned: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "<%d>\n", i ) ;

        i32Number = GetItemAssignedHandleByPosition( ai_iItemHandle, i ) ;
        pccString = GetItemId( i32Number ) ;
        i32Aux = GetItemNodeHandle( i32Number ) ;
        pcAux = GetNodeId( i32Aux ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tAssigned Handle: <%d %s.%s>\n", i32Number, pcAux, pccString ) ;
    }

	iLength = GetItemNumberOfAssignedDependents( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Assigned Dependents: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "<%d>\n", i ) ;

        i32Number = GetItemAssignedDependentHandleByPosition( ai_iItemHandle, i ) ;
        pccString = GetItemId( i32Number ) ;
        i32Aux = GetItemNodeHandle( i32Number ) ;
        pcAux = GetNodeId( i32Aux ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tAssigned Dependent Handle: <%d %s.%s>\n", i32Number, pcAux, pccString ) ;
    }

    iLength = GetItemNumberOfExecuted( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Executed: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "<%d>\n", i ) ;

        i32Number = GetItemExecutedHandleByPosition( ai_iItemHandle, i ) ;
        pccString = GetItemId( i32Number ) ;
        i32Aux = GetItemNodeHandle( i32Number ) ;
        pcAux = GetNodeId( i32Aux ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tExecuted Handle: <%d %s.%s>\n", i32Number, pcAux, pccString ) ;
    }

	iLength = GetItemNumberOfExecutedDependents( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Executed Dependents: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "<%d>\n", i ) ;

        i32Number = GetItemExecutedDependentHandleByPosition( ai_iItemHandle, i ) ;
        pccString = GetItemId( i32Number ) ;
        i32Aux = GetItemNodeHandle( i32Number ) ;
        pcAux = GetNodeId( i32Aux ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tExecuted Dependent Handle: <%d %s.%s>\n", i32Number, pcAux, pccString ) ;
    }

    iLength = GetItemNumberOfFormIds( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Form Ids: <%d>\n", iLength ) ;

    iSlices = GetItemNumberOfSlices( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Slices: <%d>\n", iSlices ) ;

    iFormulas = GetItemNumberOfFormulas( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Formulas: <%d>\n", iFormulas ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "<%d>\n", i ) ;

        pccString = GetItemFormIdByPosition( ai_iItemHandle, i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tId By Position: <%d - %s>\n", i, pccString ) ;

        i16Number = GetItemFormOrderByFormId( ai_iItemHandle, pccString ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tOrder By Id: <%d - %s>\n", i16Number, pccString ) ;

		for( j = 0 ; j < iSlices; j++ )
		{
			fprintf( ai_pfFile, acIndent ) ;
			fprintf( ai_pfFile, "\t<%d>\n", j ) ;

			dDate = GetItemSliceStartDate( ai_iItemHandle, j ) ;
			ClDateToString( dDate, acDate, M4_SECOND_END + 1 ) ;
			fprintf( ai_pfFile, acIndent ) ;
			fprintf( ai_pfFile, "\t\tStart Date: <%s>\n", acDate ) ;

			dDate = GetItemSliceEndDate( ai_iItemHandle, j ) ;
			ClDateToString( dDate, acDate, M4_SECOND_END + 1 ) ;
			fprintf( ai_pfFile, acIndent ) ;
			fprintf( ai_pfFile, "\t\tEnd Date:   <%s>\n", acDate ) ;

            pccString = GetItemCodeByPosition( ai_iItemHandle, i, j ) ;

			fprintf( ai_pfFile, acIndent ) ;

			if( pccString != NULL )
			{
				fprintf( ai_pfFile, "\t\t<%d - %d>\n", i * iSlices + j, pccString - m_pcBase ) ;
			}
			else
			{
				fprintf( ai_pfFile, "\t\t<%d - %s>\n", i * iSlices + j, "NULL" ) ;
			}
		}
    }


	iTotal = iSlices * iFormulas ;
	iNext = -1 ;

	while( iNext < iTotal )
	{
		pccString = GetItemNextCode( ai_iItemHandle, iNext ) ;

		if( pccString != NULL && iNext < iTotal )
		{
			fprintf( ai_pfFile, acIndent ) ;
			fprintf( ai_pfFile, "Formula: <%d - %d>\n", iNext, pccString - m_pcBase ) ;
			_PrintCode( pccString, ai_iItemHandle, iNext / iSlices, ao_roString, ai_pfFile, ai_iIndent + 1 ) ;
		}
	}


    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ End Item =======================\n" ) ;

    return( M4_SUCCESS ) ;
}



m4return_t  ClCompiledMCR :: _PrintNode( m4uint32_t ai_iNodeHandle, ClLongString &ao_roString, FILE* ai_pfFile, m4uint8_t ai_iIndent )
{

	m4uint8_t	i8Number ;
	m4uint16_t	i16Number ;
	m4uint32_t	i32Number ;
    m4pcchar_t  pccString ;

	m4uint8_t	iOwnSentence ;
    m4uint16_t  i ;
    m4uint16_t  iLength ;
    m4uint32_t  i32Aux ;
    m4pcchar_t  pcAux, pcAux2, pcAux3 ;
    m4char_t    acIndent[ 10 ] ;


    for( i = 0 ; i < ai_iIndent ; i++ )
    {
        acIndent[ i ] = '\t' ;
    }

    acIndent[ i ] = '\0' ;


    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ Node ==================================================\n" ) ;


    iOwnSentence = GetNodeOwnSentence( ai_iNodeHandle ) ;
    pccString = M4ClBool( iOwnSentence ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Has Sentence: <%d - %s>\n", iOwnSentence, pccString ) ;

    i32Number = GetNodeReadSentenceHandle( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetNodeReadSentenceId( ai_iNodeHandle ) ;
        fprintf( ai_pfFile, "Read Sentence Handle: <%d - %s>\n", i32Number, pccString ) ;

		if( iOwnSentence == 1 )
		{
			_PrintSentence( i32Number, ai_pfFile, ai_iIndent + 1 ) ;
		}
    }
    else
    {
        fprintf( ai_pfFile, "Read Sentence Handle: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeWriteSentenceHandle( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;

    if( i32Number != 0 )
    {
        pccString = GetNodeWriteSentenceId( ai_iNodeHandle ) ;
        fprintf( ai_pfFile, "Write Sentence Handle: <%d - %s\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Write Sentence Handle: <%d>\n", i32Number ) ;
    }

    pccString = GetNodeReadObjectId( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( pccString == NULL )
    {
		pccString = "NULL" ;
	}
    fprintf( ai_pfFile, "Read Object Id: <%s>\n", pccString ) ;

    pccString = GetNodeWriteObjectId( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( pccString == NULL )
    {
		pccString = "NULL" ;
	}
    fprintf( ai_pfFile, "Write Object Id: <%s>\n", pccString ) ;

    pccString = GetNodeId( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Node Id: <%s>\n", pccString ) ;

    pccString = GetNodeM4ObjId( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "M4Obj Id: <%s>\n", pccString ) ;

    pccString = GetNodeName( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Name: <%s>\n", pccString ) ;

    pccString = GetNodeTiId( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Ti Id: <%s>\n", pccString ) ;

    pccString = GetNodeGroupObjects( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Group Objects: <%s>\n", pccString ) ;

    i32Number = GetNodeStartDateItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Start Date Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Start Date Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeEndDateItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "End Date Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "End Date Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeStartCorDateItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Start Correction Date Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Start Correction Date Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeEndCorDateItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "End Correction Date Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "End Correction Date Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeVirtualFlagItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Virtual Flag Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Virtual Flag Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeFilterStartDateItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Filter Start Date Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Filter Start Date Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeFilterEndDateItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Filter End Date Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Filter End Date Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeFilterStartCorDateItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Filter Start Correction Date Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Filter Start Correction Date Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeFilterEndCorDateItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Filter End Correction Date Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Filter End Correction Date Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeCurrencyTypeItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Currency Type Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Currency Type Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeCurrencyExchDateItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Currency Exchange Date Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Currency Exchange Date Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeChangeReasonItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Change Reason Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Change Reason Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeDmdComponentItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Dmd Component Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Dmd Component Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeDmdValueItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Dmd Value Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Dmd Value Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeLoadSQLItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Load SQL Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Load SQL Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodePriorityItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Priority Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Priority Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeImputeDateItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Impute Date Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Impute Date Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodePayDateItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Pay Date Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Pay Date Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodePayTypeItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Pay Type Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Pay Type Date Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodePayFrequencyItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Pay Frequency Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Pay Frequency Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeImputePayTypeItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Impute Pay Type Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Impute Pay Type Date Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeImputePayFrequencyItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Impute Pay Frequency Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Impute Pay Frequency Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeClosingDateItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Closing Date Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Closing Date Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeSysParamsItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Sys Params Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Sys Params Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeBDLChecksItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "BDL Check Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "BDL Check Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeRAMOrderByItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "RAM Order By Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "RAM Order By Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeOrganizationIdItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "Organization Id Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Organization Id Item: <%d>\n", i32Number ) ;
    }


    i32Number = GetNodeLoadBlkItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "LoadBlk Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "LoadBlk Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeDeleteBlkItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "DeleteBlk Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "DeleteBlk Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeUpdateBlkItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "UpdateBlk Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "UpdateBlk Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetNodeInsertBlkItem( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "InsertBlk Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "InsertBlk Item: <%d>\n", i32Number ) ;
    }


    i32Number = GetNodeDefaultIndex( ai_iNodeHandle ) ;
	if( i32Number != 0 )
	{
		i32Aux = GetIndexId( i32Number ) ;
	}
	else
	{
		i32Aux = 0 ;
	}
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Default Index: <%d - %d>\n", i32Number, i32Aux ) ;

    i32Number = GetNodeNumRows( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Number Of Rows: <%d>\n", i32Number ) ;

    i32Number = GetNodeNumKeepRows( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Number Of Keep Rows: <%d>\n", i32Number ) ;
	
    i32Number = GetNodeNumRowsDB( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Number Of Database Rows: <%d>\n", i32Number ) ;

    i32Number = GetNodeOleDispId( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Ole Disp Id: <%d>\n", i32Number ) ;

    pccString = GetNodeOleNodeInterId( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Ole Node Inter Id: <%s>\n", pccString ) ;

    i32Number = GetNodeMaxNumBlocks( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Max Num Blocks: <%d>\n", i32Number ) ;

    i32Number = GetNodeMaxNumRecords( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Max Num Records: <%d>\n", i32Number ) ;

    i32Number = GetNodeSCRStart( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "SCR Start: <%d>\n", i32Number ) ;

    i16Number = GetNodeIndex( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Index: <%d>\n", i16Number ) ;

    i16Number = GetNodeType( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Type: <%d>\n", i16Number ) ;

    i16Number = GetNodeOrder( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Order: <%d>\n", i16Number ) ;

    i8Number = GetNodeCapacity( ai_iNodeHandle ) ;
    pccString = M4ClNodeCapacity( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Capacity: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetNodeIsRoot( ai_iNodeHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Is Root: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetNodeIsRealRoot( ai_iNodeHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Is Real Root: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetNodeAutoLoad( ai_iNodeHandle ) ;
    pccString = M4ClAutoloadMode( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Autoload: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetNodeIsOrdered( ai_iNodeHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Is Ordered: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetNodeIsVisible( ai_iNodeHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Is Visible: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetNodeDynFilter( ai_iNodeHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Dymnamic Filter: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetNodeIdAutoFilter( ai_iNodeHandle ) ;
    pccString = M4ClNodeAutoFilter( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Id Auto Filter: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetNodeCsType( ai_iNodeHandle ) ;
    pccString = M4ClCsType( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Cs Type: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetNodeSyncType( ai_iNodeHandle ) ;
    pccString = M4ClSyncMode( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Sync Type: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetNodeTemporality( ai_iNodeHandle ) ;
    pccString = M4ClNodeTemporality( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Temporality: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetNodeCompleteness( ai_iNodeHandle ) ;
    pccString = M4ClNodeCompleteness( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Completeness: <%d - %s>\n", i8Number, pccString ) ;
    
    i8Number = GetNodePeriodCorrected( ai_iNodeHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Period Corrected: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetNodeIsExternal( ai_iNodeHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Is External: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetNodeIsQBFFilter( ai_iNodeHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Is QBF Filter: <%d - %s>\n", i8Number, pccString ) ;
	
    i8Number = GetNodeAffectsDB( ai_iNodeHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Affects DB: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetNodeDBReload( ai_iNodeHandle ) ;
    pccString = M4ClNodeDBReload( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "DB Reload: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetNodeTiInheritLevel( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Ti Inherit Level: <%d>\n", i8Number ) ;
	
    i8Number = GetNodeIsOverWritten( ai_iNodeHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Is OverWritten: <%d>\n", i8Number ) ;
	

    iLength = GetNodeNumberOfItems( ai_iNodeHandle ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Items: <%d>\n", iLength ) ;

    iLength = GetNodeNumberOfNodeItems( ai_iNodeHandle ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Node Items: <%d>\n", iLength ) ;

    iLength = GetNodeNumberOfBlockItems( ai_iNodeHandle ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Block Items: <%d>\n", iLength ) ;

    iLength = GetNodeNumberOfRegisterItems( ai_iNodeHandle ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Register Items: <%d>\n", iLength ) ;

    iLength = GetNodeNumberOfItems( ai_iNodeHandle ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<%d>\n", i ) ;

        pccString = GetNodeItemIdByPosition( ai_iNodeHandle, i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tItem Id: <%s>\n", pccString ) ;

        i32Number = GetNodeItemHandleById( ai_iNodeHandle, pccString, M4_TRUE ) ;
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tItem Handle By Id: <%d - %s>\n", i32Number, pccString ) ;

        i32Number = GetNodeItemHandleByPosition( ai_iNodeHandle, i ) ;
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tItem Handle By Position: <%d - %s>\n", i32Number, pccString ) ;

        _PrintItem( i32Number, ao_roString, ai_pfFile, ai_iIndent + 1 ) ;
    }


    iLength = GetNodeNumberOfConnectors( ai_iNodeHandle ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Connectors: <%d>\n", iLength ) ;

    iLength = GetNodeNumberOfRBConnectors( ai_iNodeHandle ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "RB Connectors: <%d>\n", iLength ) ;

    iLength = GetNodeNumberOfBBConnectors( ai_iNodeHandle ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "BB Connectors: <%d>\n", iLength ) ;

    iLength = GetNodeNumberOfNRConnectors( ai_iNodeHandle ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "NR Connectors: <%d>\n", iLength ) ;

    i16Number = GetNodeRBFirstConnector( ai_iNodeHandle ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "RB First Connector: <%d>\n", i16Number ) ;

    i16Number = GetNodeBBFirstConnector( ai_iNodeHandle ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "BB First Connector: <%d>\n", i16Number ) ;

    i16Number = GetNodeNRFirstConnector( ai_iNodeHandle ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "NR First Connector: <%d>\n", i16Number ) ;


    iLength = GetNodeNumberOfConnectors( ai_iNodeHandle ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<%d>\n", i ) ;

        i32Number = GetNodeConnectorHandleByPosition( ai_iNodeHandle, i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tConnector Handle: <%d>\n", i32Number ) ;

        _PrintConnector( i32Number, ai_pfFile, ai_iIndent + 1 ) ;
    }


	i16Number = GetNodeNumberOfAutoConnectors( ai_iNodeHandle ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Auto Connectors: <%d>\n", i16Number ) ;

    for( i = 0 ; i < i16Number ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<%d>\n", i ) ;

        i32Number = GetNodeConnectorHandleByPosition( ai_iNodeHandle, i + iLength ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tConnector Handle: <%d>\n", i32Number ) ;

        _PrintConnector( i32Number, ai_pfFile, ai_iIndent + 1 ) ;
    }


    iLength = GetNodeNumberOfInvConnectors( ai_iNodeHandle ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Inverse Connectors: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<%d>\n", i ) ;

        i32Number = GetNodeInvConnectorHandleByPosition( ai_iNodeHandle, i ) ;
        i32Aux = GetNodeConnectorFatherNodeHandle( i32Number ) ;
        pccString = GetNodeId( i32Aux ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tInverse Connector Handle: <%d - %d - %s>\n", i32Number, i32Aux, pccString ) ;
    }


    iLength = GetNodeNumberOfGroups( ai_iNodeHandle ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Groups: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<%d>\n", i ) ;

        pccString = GetNodeGroupIdByPosition( ai_iNodeHandle, i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tGroup Id: <%s>\n", pccString ) ;

        i32Number = GetNodeGroupHandleByPosition( ai_iNodeHandle, i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tGroup Handle: <%d>\n", i32Number ) ;

        i32Number = GetNodeGroupHandleById( ai_iNodeHandle, pccString, M4_TRUE ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tGroup Handle: <%d>\n", i32Number ) ;

        _PrintGroup( i32Number, ai_pfFile, ai_iIndent + 1 ) ;
    }

    
    iLength = GetNodeNumberOfPlugs( ai_iNodeHandle ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Plugs: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<%d>\n", i ) ;

        i32Number = GetNodePlugHandleByPosition( ai_iNodeHandle, i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tPlug Handle: <%d>\n", i32Number ) ;

        pccString = GetNodePlugFatherChanneIdByPosition( ai_iNodeHandle, i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tPlug Father M4Obj Id: <%s>\n", pccString ) ;

        pcAux = GetNodePlugFatherNodeIdByPosition( ai_iNodeHandle, i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tPlug Father Node Id: <%s>\n", pcAux ) ;

        i32Number = GetNodePlugHandleByIds( ai_iNodeHandle, pccString, pcAux, M4_TRUE ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tPlug Handle: <%d>\n", i32Number ) ;

        _PrintPlug( i32Number, ai_pfFile, ai_iIndent + 1 ) ;
    }


    iLength = GetNodeNumberOfIndexes( ai_iNodeHandle ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Indexes: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<%d>\n", i ) ;

        i32Aux = GetNodeIndexIdByPosition( ai_iNodeHandle, i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tIndex Id: <%d>\n", i32Aux ) ;

        i32Number = GetNodeIndexHandleById( ai_iNodeHandle, i32Aux ) ;
        i32Aux = GetIndexId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tIndex Handle By Id: <%d - %d>\n", i32Number, i32Aux ) ;

        i32Number = GetNodeIndexHandleByPosition( ai_iNodeHandle, i ) ;
        i32Aux = GetIndexId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tIndex Handle By Position: <%d - %d>\n", i32Number, i32Aux ) ;

        _PrintIndex( i32Number, ai_pfFile, ai_iIndent + 1 ) ;
    }


    iLength = GetNodeNumberOfAlias( ai_iNodeHandle ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Alias: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<%d>\n", i ) ;

        pccString = GetNodeAliasIdByPosition( ai_iNodeHandle, i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tAlias Id: <%s>\n", pccString ) ;

        i32Number = GetNodeAliasNodeHandleById( ai_iNodeHandle, pccString, M4_TRUE ) ;

		if( i32Number != 0 )
		{
			pccString = GetNodeId( i32Number ) ;
		}
		else
		{
			pccString = "" ;
		}

        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tAlias Node Handle By Id: <%d - %s>\n", i32Number, pccString ) ;

        i32Number = GetNodeAliasNodeHandleByPosition( ai_iNodeHandle, i ) ;
        pccString = GetNodeId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tAlias Node Handle By Position: <%d - %s>\n", i32Number, pccString ) ;
    }


    iLength = GetNodeNumberOfT3Alias( ai_iNodeHandle ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "M4Obj Alias: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<%d>\n", i ) ;

        pcAux = GetNodeT3AliasIdByPosition( ai_iNodeHandle, i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tM4Obj Alias Id: <%s>\n", pcAux ) ;

        i32Number = GetNodeT3AliasInstanceHandleById( ai_iNodeHandle, pcAux, M4_TRUE ) ;
        pccString = GetInstanceId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tM4Obj Alias Instance Handle By Alias: <%d - %s>\n", i32Number, pccString ) ;

        pccString = GetNodeT3AliasInstanceById( ai_iNodeHandle, pcAux, M4_TRUE ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tM4Obj Alias Instance By Alias: <%d - %s>\n", i32Number, pccString ) ;

        i32Number = GetNodeT3AliasInstanceHandleByPosition( ai_iNodeHandle, i ) ;
        pccString = GetInstanceId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tM4Obj Alias Instance Handle By Position: <%d - %s>\n", i32Number, pccString ) ;

        pccString = GetNodeT3AliasInstanceByPosition( ai_iNodeHandle, i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tM4Obj Alias Instance By Position: <%d - %s>\n", i32Number, pccString ) ;
    }


    iLength = GetNodeNumberOfDmds( ai_iNodeHandle ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Dmds: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<%d>\n", i ) ;

        pcAux = GetNodeDmdDmdIdByPosition( ai_iNodeHandle, i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tDmd Id: <%s>\n", pcAux ) ;

        pcAux2 = GetNodeDmdDmdComponentIdByPosition( ai_iNodeHandle, i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tDmd Component Id: <%s>\n", pcAux2 ) ;

        pcAux3 = GetNodeDmdDmdFieldIdByPosition( ai_iNodeHandle, i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tDmd Field Id: <%s>\n", pcAux3 ) ;

        i32Number = GetNodeDmdHandleByIds( ai_iNodeHandle, pcAux, pcAux2, pcAux3, M4_TRUE ) ;
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tDmd Handle By Ids: <%d - %s>\n", i32Number, pccString ) ;

        i32Number = GetNodeDmdHandleByPosition( ai_iNodeHandle, i ) ;
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tDmd Handle By Position: <%d - %s>\n", i32Number, pccString ) ;
    }


    iLength = GetNodeNumberOfQBFFilters( ai_iNodeHandle ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "QBF Filters: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<%d>\n", i ) ;

        pccString = GetNodeQBFFilterIdByPosition( ai_iNodeHandle, i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tFilter Id: <%s>\n", pccString ) ;

        i32Number = GetNodeQBFFilterHandleById( ai_iNodeHandle, pccString, M4_TRUE ) ;
        pccString = GetFilterId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tFilter Handle By Position: <%d - %s>\n", i32Number, pccString ) ;

        i32Number = GetNodeQBFFilterHandleByPosition( ai_iNodeHandle, i ) ;
        pccString = GetFilterId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tFilter Handle By Id: <%d - %s>\n", i32Number, pccString ) ;

        _PrintFilter( i32Number, ai_pfFile, ai_iIndent + 1 ) ;
    }


    iLength = GetNodeNumberOfFindFilters( ai_iNodeHandle ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Find Filters: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<%d>\n", i ) ;

        pccString = GetNodeFindFilterIdByPosition( ai_iNodeHandle, i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tFilter Id: <%s>\n", pccString ) ;

        i32Number = GetNodeFindFilterHandleById( ai_iNodeHandle, pccString, M4_TRUE ) ;
        pccString = GetFilterId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tFilter Handle By Position: <%d - %s>\n", i32Number, pccString ) ;

        i32Number = GetNodeFindFilterHandleByPosition( ai_iNodeHandle, i ) ;
        pccString = GetFilterId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tFilter Handle By Id: <%d - %s>\n", i32Number, pccString ) ;

        _PrintFilter( i32Number, ai_pfFile, ai_iIndent + 1 ) ;
    }


    iLength = GetNodeNumberOfSysSentences( ai_iNodeHandle ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Sys Sentences: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<%d>\n", i ) ;

        i32Number = GetNodeSysSentenceHandleByPosition( ai_iNodeHandle, i ) ;
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tSys Sentence Handle By Position: <%d - %s>\n", i32Number, pccString ) ;
    }


    iLength = GetNodeNumberOfSysHints( ai_iNodeHandle ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Sys Hints: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<%d>\n", i ) ;

        i32Number = GetNodeSysHintHandleByPosition( ai_iNodeHandle, i ) ;
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tSys Hint Handle By Position: <%d - %s>\n", i32Number, pccString ) ;
    }


    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ End Node =================================================\n" ) ;

    return( M4_SUCCESS ) ;
}




m4return_t  ClCompiledMCR :: _PrintPlug( m4uint32_t ai_iPlugHandle, FILE* ai_pfFile, m4uint8_t ai_iIndent )
{

	m4uint8_t	i8Number ;
	m4uint32_t	i32Number ;
    m4pcchar_t  pccString ;

    m4uint16_t  i ;
    m4uint16_t  iLength ;
	m4uint32_t	i32Aux ;
    m4char_t    acIndent[ 10 ] ;


    for( i = 0 ; i < ai_iIndent ; i++ )
    {
        acIndent[ i ] = '\t' ;
    }

    acIndent[ i ] = '\0' ;


    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ Plug ============================================\n" ) ;


    pccString = GetPlugFatherChanneId( ai_iPlugHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Father M4Obj: <%s>\n", pccString ) ;

    pccString = GetPlugFatherChanneName( ai_iPlugHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Father M4Obj Name: <%s>\n", pccString ) ;

    pccString = GetPlugFatherNodeId( ai_iPlugHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Father Node: <%s>\n", pccString ) ;

    i32Number = GetPlugSCRStart( ai_iPlugHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Security Start: <%d>\n", i32Number ) ;

    i8Number = GetPlugType( ai_iPlugHandle ) ;
    pccString = M4ClConnectedNodeType( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Type: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetPlugIsFilter( ai_iPlugHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Is Filter: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetPlugRelationTypeId( ai_iPlugHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Relation Type Id: <%d>\n", i8Number ) ;

    i8Number = GetPlugIsMultiselection( ai_iPlugHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Is Multiselection: <%d - %s>\n", i8Number, pccString ) ;

    iLength = GetPlugNumberOfItems( ai_iPlugHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Plug Items: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "<%d>\n", i ) ;

        i32Number = GetPlugItemHandleByPosition( ai_iPlugHandle, i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tPlug Item Handle: <%d>\n", i32Number ) ;

        pccString = GetPlugItemFatherItemId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tFather Item Id: <%s>\n", pccString ) ;

        i32Aux = GetPlugItemSonItemHandle( i32Number ) ;
        pccString = GetItemId( i32Aux ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tSon Item Handle: <%d - %s>\n", i32Aux, pccString ) ;

        i8Number = GetPlugItemRelation( i32Number ) ;
        pccString = M4ClConnectedItemRelation( i8Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tRelation: <%d - %s>\n", i8Number, pccString ) ;
    }

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ End Plug =================================\n" ) ;

    return( M4_SUCCESS ) ;
}



m4return_t  ClCompiledMCR :: _PrintGroup( m4uint32_t ai_iGroupHandle, FILE* ai_pfFile, m4uint8_t ai_iIndent )
{

	m4uint32_t	i32Number ;
    m4pcchar_t  pccString ;

    m4uint16_t  i ;
    m4uint16_t  iLength ;
    m4char_t    acIndent[ 10 ] ;


    for( i = 0 ; i < ai_iIndent ; i++ )
    {
        acIndent[ i ] = '\t' ;
    }

    acIndent[ i ] = '\0' ;


    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ Group ============================================\n" ) ;

    iLength = GetGroupNumberOfItems( ai_iGroupHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Items: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        i32Number = GetGroupItemHandleByPosition( ai_iGroupHandle, i ) ;
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tHandle: <%d - %s>\n", i32Number, pccString ) ;
    }

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ End Group =================================\n" ) ;

    return( M4_SUCCESS ) ;
}



m4return_t  ClCompiledMCR :: _PrintItemDefinition( m4uint32_t ai_iItemHandle, FILE* ai_pfFile, m4uint8_t ai_iIndent )
{

	m4uint8_t	    i8Number ;
	m4uint16_t	    i16Number ;
	m4uint32_t	    i32Number ;
    m4pcchar_t      pccString ;

	m4int16_t	    iArgument ;
	m4uint16_t	    iFlag ;
    m4uint16_t      i ;
    m4uint16_t      iLength ;
	m4int32_t	    i32sNumber ;
    m4char_t        acString[ 21 ] ;
    m4char_t        acIndent[ 10 ] ;
    m4VariantType   vValue ;


    for( i = 0 ; i < ai_iIndent ; i++ )
    {
        acIndent[ i ] = '\t' ;
    }

    acIndent[ i ] = '\0' ;


    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ Item Definition ======================================\n" ) ;

    pccString = GetItemId( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Id: <%s>\n", pccString ) ;

    i32Number = GetItemSynonymId( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Id Synonym: <%d>\n", i32Number ) ;

    pccString = GetItemTiId( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Ti Id: <%s>\n", pccString ) ;

    GetItemDefaultValue( ai_iItemHandle, vValue ) ;
    fprintf( ai_pfFile, acIndent ) ;

    switch( vValue.Type )
    {
        case M4CL_CPP_TYPE_NUMBER :
            fprintf( ai_pfFile, "Default: <%f>\n", vValue.Data.DoubleData ) ;
            break ;

        case M4CL_CPP_TYPE_STRING_VAR :
            fprintf( ai_pfFile, "Default: <%s>\n", vValue.Data.PointerChar ) ;
            break ;

        case M4CL_CPP_TYPE_DATE :
            ClDateToString( vValue.Data.DoubleData, acString, M4_SECOND_END + 1 ) ;
            fprintf( ai_pfFile, "Default: <%s>\n", acString ) ;
            break ;
        
        default :
            fprintf( ai_pfFile, "Default: <NULL>\n" ) ;
            break ;
    }

    pccString = GetItemDmd( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Dmd: <%s>\n", pccString ) ;

    pccString = GetItemDmdComponent( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Dmd Component: <%s>\n", pccString ) ;

    pccString = GetItemDmdCrosstab( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Dmd CrossTab: <%s>\n", pccString ) ;

    pccString = GetItemDmdField( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Dmd Field: <%s>\n", pccString ) ;

    i32Number = GetItemDBPrecision( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "DB Precision: <%d>\n", i32Number ) ;

    i32sNumber = GetItemPrecision( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Precision: <%d>\n", i32sNumber ) ;

    i32Number = GetItemMaxSize( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Max Size: <%d>\n", i32Number ) ;

    pccString = GetItemReadObjectAlias( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Read Object Alias: <%s>\n", pccString ) ;

    pccString = GetItemWriteObjectAlias( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Write Object Alias: <%s>\n", pccString ) ;

    pccString = GetItemReadFieldId( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Read Field Id: <%s>\n", pccString ) ;

    pccString = GetItemWriteFieldId( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Write Field Id: <%s>\n", pccString ) ;

    pccString = GetItemReadObjectId( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Read Object Id: <%s>\n", pccString ) ;

    pccString = GetItemWriteObjectId( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Write Object Id: <%s>\n", pccString ) ;

    i16Number = GetItemIndex( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Index: <%d>\n", i16Number ) ;

    i16Number = GetItemOrder( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Order: <%d>\n", i16Number ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Flags: <0x" ) ;

	iFlag = 0x008000 ;
	for( i = 0 ; i < 16 ; i++ )
	{
		i8Number = GetItemFlag( ai_iItemHandle, iFlag ) ;
		iFlag >>= 1 ;

		if( i8Number != 0 )
		{
			fprintf( ai_pfFile, "1" ) ;
		}
		else
		{
			fprintf( ai_pfFile, "0" ) ;
		}
	}
    fprintf( ai_pfFile, ">\n" ) ;

    i8Number = GetItemType( ai_iItemHandle ) ;
    pccString = M4ClItemType( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Type: <%d - %s>\n", i8Number, pccString ) ;
    
    i8Number = GetItemTheoreticScope( ai_iItemHandle ) ;
    pccString = M4ClItemScope( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Theoretic Scope: <%d - %s>\n", i8Number, pccString ) ;
    
    i8Number = GetItemM4Type( ai_iItemHandle ) ;
    pccString = M4ClM4Type( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "M4 Type: <%d - %s>\n", i8Number, pccString ) ;
    
    i8Number = GetItemCppType( ai_iItemHandle ) ;
    pccString = M4ClCppType( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Cpp Type: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetItemScale( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Scale: <%d>\n", i8Number ) ;
    
    i8Number = GetItemSliceBhrv( ai_iItemHandle ) ;
    pccString = M4ClItemSliceBhrv( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Slice Behaviour: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetItemSliceSplit( ai_iItemHandle ) ;
    pccString = M4ClItemSliceSplit( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Slice Split: <%d - %s>\n", i8Number, pccString ) ;
    
    i8Number = GetItemIdTotalize( ai_iItemHandle ) ;
    pccString = M4ClIdTotalize( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Id Totalize: <%d - %s>\n", i8Number, pccString ) ;
    
    i8Number = GetItemSliceTotalize( ai_iItemHandle ) ;
    pccString = M4ClIdTotalize( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Id Slice Totalize: <%d - %s>\n", i8Number, pccString ) ;
    
    i8Number = GetItemTransactionMode( ai_iItemHandle ) ;
    pccString = M4ClItemTransactionMode( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Transaction Mode: <%d - %s>\n", i8Number, pccString ) ;
    
    i8Number = GetItemMethodLevel( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Method Level: <%d>\n", i8Number ) ;

    i8Number = GetItemIsVariableLength( ai_iItemHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Is Variable Length: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetItemSentTotType( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Sentence Totalize Type: <%d>\n", i8Number ) ;

    i8Number = GetItemVariableArguments( ai_iItemHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Variable Arguments: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetItemIsVisible( ai_iItemHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "IsVisible: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetItemModifyData( ai_iItemHandle ) ;
    pccString = M4ClItemModifyData( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Modify Data: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetItemDefaultValueFlag( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Default Value Flag: <%d>\n", i8Number ) ;

    i8Number = GetItemInternalType( ai_iItemHandle ) ;
    pccString = M4ClItemInternalType( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Internal Type: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetItemConvertFunction( ai_iItemHandle ) ;
    pccString = M4ClItemConvertFunction( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Convert Function: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetItemIsInherited( ai_iItemHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Is Inherit: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetItemIsPublic( ai_iItemHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Is Public: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetItemIsParameter( ai_iItemHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Is Parameter: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetItemCheckNotNull( ai_iItemHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Check Not Null: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetItemClientNotNull( ai_iItemHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Client Not Null: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetItemNotNull( ai_iItemHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Not Null: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetItemAffectsDB( ai_iItemHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Affects DB: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetItemGenerateSlices( ai_iItemHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Generate Slices: <%d - %s>\n", i8Number, pccString ) ;
	
    i8Number = GetItemIsPK( ai_iItemHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Is PK: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetItemIsNodal( ai_iItemHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Is Nodal: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetItemIsEvent( ai_iItemHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Is Event: <%d - %s>\n", i8Number, pccString ) ;


    iLength = GetItemNumberOfArguments( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Arguments: <%d>\n", iLength ) ;

    i16Number = GetItemNumberOfReferedArguments( ai_iItemHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Arguments By Reference: <%d>\n", i16Number ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "<%d>\n", i ) ;

        pccString = GetItemArgumentIdByPosition( ai_iItemHandle, i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tArgument Id: <%s>\n", pccString ) ;

        iArgument = GetItemArgumentPositionById( ai_iItemHandle, pccString ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tArgument Position By Id: <%d>\n", iArgument ) ;

        pccString = GetItemArgumentNameByPosition( ai_iItemHandle, i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tArgument Name: <%s>\n", pccString ) ;

        i16Number = GetItemArgumentPrecisionByPosition( ai_iItemHandle, i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tArgument Precision: <%d>\n", i16Number ) ;

        i8Number = GetItemArgumentTypeByPosition( ai_iItemHandle, i ) ;
        pccString = M4ClArgumentType( i8Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tArgument Type: <%d - %s>\n", i8Number, pccString ) ;

        i8Number = GetItemArgumentM4TypeByPosition( ai_iItemHandle, i ) ;
        pccString = M4ClM4Type( i8Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tArgument M4 Type: <%d - %s>\n", i8Number, pccString ) ;
    }

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ End Definicion Item =================================\n" ) ;

    return( M4_SUCCESS ) ;
}


m4return_t  ClCompiledMCR :: _PrintItemConn( m4uint32_t ai_iItemConnectorHandle, FILE* ai_pfFile, m4uint8_t ai_iIndent )
{

	m4uint8_t	i8Number ;
	m4uint32_t	i32Number ;
    m4pcchar_t  pccString ;

    m4uint16_t  i ;
	m4uint32_t	i32Aux ;
    m4pcchar_t  pcAux ;
    m4char_t    acIndent[ 10 ] ;

    
    for( i = 0 ; i < ai_iIndent ; i++ )
    {
        acIndent[ i ] = '\t' ;
    }

    acIndent[ i ] = '\0' ;


    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ Item Connector ============================================\n" ) ;


    i32Number = GetItemConnectorNodeConnectorHandle( ai_iItemConnectorHandle ) ;

    if( i32Number == 0 )
    {
        i32Aux = 0 ;
        pcAux = "NULL" ;
    }
    else
    {
        i32Aux = GetNodeConnectorSonNodeHandle( i32Number ) ;
        pcAux = GetNodeId( i32Aux ) ;
    }

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "\tItem Connector: <%d - %d - %s>\n", i32Number, i32Aux, pcAux ) ;

    i32Number = GetItemConnectorFatherItemHandle( ai_iItemConnectorHandle ) ;
    i32Aux = GetItemNodeHandle( i32Number ) ;
    pcAux = GetNodeId( i32Aux ) ;
    pccString = GetItemId( i32Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "\tFather Item Handle: <%d - %s.%s>\n", i32Number, pcAux, pccString ) ;

    i32Number = GetItemConnectorSonItemHandle( ai_iItemConnectorHandle ) ;
    i32Aux = GetItemNodeHandle( i32Number ) ;
    pcAux = GetNodeId( i32Aux ) ;
    pccString = GetItemId( i32Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "\tSon Item Handle: <%d - %s.%s>\n", i32Number, pcAux, pccString ) ;

    i8Number = GetItemConnectorPrecedence( ai_iItemConnectorHandle ) ;
    pccString = M4ClConnectedItemPrecedence( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "\tPrecedence: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetItemConnectorSpin( ai_iItemConnectorHandle ) ;
    pccString = M4ClConnectedItemSpin( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "\tSpin: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetItemConnectorRelation( ai_iItemConnectorHandle ) ;
    pccString = M4ClConnectedItemRelation( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "\tRelation: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetItemConnectorContext( ai_iItemConnectorHandle ) ;
    pccString = M4ClConnectedItemContext( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "\tContext: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetItemConnectorCsType( ai_iItemConnectorHandle ) ;
    pccString = M4ClCsType( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "\tCs Type: <%d - %s>\n", i8Number, pccString ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ End Item Connector ============================================\n" ) ;

    return( M4_SUCCESS ) ;
}



m4return_t  ClCompiledMCR :: _PrintConnector( m4uint32_t ai_iNodeConnectorHandle, FILE* ai_pfFile, m4uint8_t ai_iIndent )
{

	m4uint8_t	i8Number ;
	m4uint32_t	i32Number ;
    m4pcchar_t  pccString ;

    m4uint16_t  i ;
    m4char_t    acIndent[ 10 ] ;

    
    for( i = 0 ; i < ai_iIndent ; i++ )
    {
        acIndent[ i ] = '\t' ;
    }

    acIndent[ i ] = '\0' ;


    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ Node Connector ==================================================\n" ) ;


    i32Number = GetNodeConnectorFatherNodeHandle( ai_iNodeConnectorHandle ) ;
    pccString = GetNodeId( i32Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Father Node Handle: <%d - %s>\n", i32Number, pccString ) ;

    i32Number = GetNodeConnectorSonNodeHandle( ai_iNodeConnectorHandle ) ;
    pccString = GetNodeId( i32Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Son Node Handle: <%d - %s>\n", i32Number, pccString ) ;


    i32Number = GetNodeConnectorSentenceHandle( ai_iNodeConnectorHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;

    if( i32Number != 0 )
    {
        pccString = GetNodeConnectorSentenceId( ai_iNodeConnectorHandle ) ;
        fprintf( ai_pfFile, "Sentence Handle: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "Sentence Handle: <%d>\n", i32Number ) ;
    }

    i8Number = GetNodeConnectorType( ai_iNodeConnectorHandle ) ;
    pccString = M4ClConnectedNodeType( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Connector Type: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetNodeConnectorExpandDelete( ai_iNodeConnectorHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Expand Delete: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetNodeConnectorExpandUndo( ai_iNodeConnectorHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Expand Undo: <%d - %s>\n", i8Number, pccString ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ End Node Connector =================================================\n" ) ;

    return( M4_SUCCESS ) ;
}


m4return_t  ClCompiledMCR :: _PrintIndex( m4uint32_t ai_iIndexHandle, FILE* ai_pfFile, m4uint8_t ai_iIndent )
{

	m4uint8_t	i8Number ;
	m4uint32_t	i32Number ;
    m4pcchar_t  pccString ;

    m4uint16_t  i ;
    m4uint16_t  iLength ;
    m4char_t    acIndent[ 10 ] ;

    
    for( i = 0 ; i < ai_iIndent ; i++ )
    {
        acIndent[ i ] = '\t' ;
    }

    acIndent[ i ] = '\0' ;


    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ Index ==================================================\n" ) ;


    i32Number = GetIndexId( ai_iIndexHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Index Id: <%d>\n", i32Number ) ;
    

    iLength = GetIndexNumberOfItems( ai_iIndexHandle ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Items: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<%d>\n", i ) ;

        i32Number = GetIndexItemHandleByPosition( ai_iIndexHandle, i ) ;
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tItem By Position: <%d - %s>\n", i32Number, pccString ) ;

        i8Number = GetIndexFunctionByPosition( ai_iIndexHandle, i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tFunction: <%d>\n", i8Number ) ;

        i8Number = GetIndexWayByPosition( ai_iIndexHandle, i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tWay: <%d>\n", i8Number ) ;
    }

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ End Index =================================================\n" ) ;

    return( M4_SUCCESS ) ;
}




m4return_t  ClCompiledMCR :: _PrintFilter( m4uint32_t ai_iFilterHandle, FILE* ai_pfFile, m4uint8_t ai_iIndent )
{

	m4uint8_t	i8Number ;
	m4uint32_t	i32Number ;
    m4pcchar_t  pccString ;

    m4uint16_t  i ;
    m4char_t    acIndent[ 10 ] ;

    
    for( i = 0 ; i < ai_iIndent ; i++ )
    {
        acIndent[ i ] = '\t' ;
    }

    acIndent[ i ] = '\0' ;


    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ Filter ==================================================\n" ) ;


    pccString = GetFilterId( ai_iFilterHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Filter Id: <%s>\n", pccString ) ;
    
    pccString = GetFilterT3Id( ai_iFilterHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "M4Obj Id: <%s>\n", pccString ) ;
    
    pccString = GetFilterNodeId( ai_iFilterHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Node Id: <%s>\n", pccString ) ;
    
    pccString = GetFilterSysSentenceItem( ai_iFilterHandle ) ;
    if( pccString == NULL )
    {
		pccString = "NULL" ;
	}
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "SysSentence Item: <%s>\n", pccString ) ;
    
    pccString = GetFilterSysParamItem( ai_iFilterHandle ) ;
    if( pccString == NULL )
    {
		pccString = "NULL" ;
	}
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "SysSParam Item: <%s>\n", pccString ) ;
    
    i8Number = GetFilterBehaviourType( ai_iFilterHandle ) ;
    pccString = M4ClFilterBehaviourType( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Behaviour Type: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetFilterIsOwnNode( ai_iFilterHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Is Own Node: <%d - %s>\n", i8Number, pccString ) ;

    i32Number = GetFilterSCRStart( ai_iFilterHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "SCR Start: <%d>\n", i32Number ) ;
    
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ End Filter =================================================\n" ) ;

    return( M4_SUCCESS ) ;
}



m4return_t  ClCompiledMCR :: _PrintSentence( m4uint32_t ai_iSentenceHandle,  FILE* ai_pfFile, m4uint8_t ai_iIndent )
{

	m4uint32_t	i32Number ;
    m4pcchar_t  pccString ;

    m4uint16_t  i ;
    m4char_t    acIndent[ 10 ] ;

    
    for( i = 0 ; i < ai_iIndent ; i++ )
    {
        acIndent[ i ] = '\t' ;
    }

    acIndent[ i ] = '\0' ;


    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ Sentence ==================================================\n" ) ;


    pccString = GetSentenceId( ai_iSentenceHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Sentence Id: <%s>\n", pccString ) ;

    pccString = GetSentenceGroupObjects( ai_iSentenceHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "GroupObjects: <%s>\n", pccString ) ;

    pccString = GetSentenceApiSql( ai_iSentenceHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "ApiSql1: <%s>\n", pccString ) ;

    pccString = GetSentenceApiSql2( ai_iSentenceHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "ApiSql2: <%s>\n", pccString ) ;

    pccString = GetSentenceApiSql3( ai_iSentenceHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "ApiSql3: <%s>\n", pccString ) ;

    pccString = GetSentenceApiSql4( ai_iSentenceHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "ApiSql4: <%s>\n", pccString ) ;

    i32Number = GetSentenceMaxNumCol( ai_iSentenceHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Max Num Column: <%d>\n", i32Number ) ;


    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ End Sentence =================================================\n" ) ;

    return( M4_SUCCESS ) ;
}


m4return_t  ClCompiledMCR :: _PrintInstance( m4uint32_t ai_iInstanceHandle, FILE* ai_pfFile, m4uint8_t ai_iIndent )
{

	m4uint8_t	i8Number ;
    m4pcchar_t  pccString ;

    m4uint16_t  i ;
    m4char_t    acIndent[ 10 ] ;

    
    for( i = 0 ; i < ai_iIndent ; i++ )
    {
        acIndent[ i ] = '\t' ;
    }

    acIndent[ i ] = '\0' ;


    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ Instance ==================================================\n" ) ;

    pccString = GetInstanceId( ai_iInstanceHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Instance Id: <%s>\n", pccString ) ;
    
    pccString = GetInstanceT3Id( ai_iInstanceHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "M4Obj Id: <%s>\n", pccString ) ;
    
    pccString = GetInstanceRoleId( ai_iInstanceHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Role Id: <%s>\n", pccString ) ;
    
    pccString = GetInstanceOrganization( ai_iInstanceHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Organization: <%s>\n", pccString ) ;
	
    i8Number = GetInstanceScope( ai_iInstanceHandle ) ;
	pccString = M4ClInstanceScope( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Scope: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetInstanceOpenMode( ai_iInstanceHandle ) ;
	pccString = M4ClOpenMode( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Open Mode: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetInstanceCsAccess( ai_iInstanceHandle ) ;
	pccString = M4ClInstanceCsAccess( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Cs Access: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetInstanceUseRole( ai_iInstanceHandle ) ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Use Role: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetInstanceOrganizationType( ai_iInstanceHandle ) ;
    pccString = M4ClInstanceOrganizationType( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Organization Type: <%d - %s>\n", i8Number, pccString ) ;


    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ End Instance =================================================\n" ) ;

    return( M4_SUCCESS ) ;
}



m4return_t  ClCompiledMCR :: _PrintBusinessMethod( m4uint32_t ai_iBusinessMethodHandle, FILE* ai_pfFile, m4uint8_t ai_iIndent )
{

	m4uint8_t	i8Number ;
	m4uint32_t	i32Number ;
    m4pcchar_t  pccString ;

    m4uint16_t  i ;
    m4uint16_t  iLength ;
    m4char_t    acIndent[ 10 ] ;

    
    for( i = 0 ; i < ai_iIndent ; i++ )
    {
        acIndent[ i ] = '\t' ;
    }

    acIndent[ i ] = '\0' ;


    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ Business Method ===========================================\n" ) ;

    pccString = GetBusinessMethodId( ai_iBusinessMethodHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Business Method Id: <%s>\n", pccString ) ;
    
    pccString = GetBusinessMethodName( ai_iBusinessMethodHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Name: <%s>\n", pccString ) ;
    
    pccString = GetBusinessMethodDescription( ai_iBusinessMethodHandle ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Description: <%s>\n", pccString ) ;
    
    i32Number = GetBusinessMethodItemHandle( ai_iBusinessMethodHandle ) ;

	if( i32Number != 0 )
	{
		pccString = GetItemId( i32Number ) ;
	}
	else
	{
		pccString = "" ;
	}

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Item: <%d - %s>\n", i32Number, pccString ) ;

    iLength = GetBusinessMethodNumberOfArguments( ai_iBusinessMethodHandle ) ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Arguments: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<%d>\n", i ) ;

        i32Number = GetBusinessMethodArgumentNodeHandleByPosition( ai_iBusinessMethodHandle, i ) ;
        pccString = GetNodeId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tArgument By Position: <%d - %s>\n", i32Number, pccString ) ;

        i8Number = GetBusinessMethodArgumentTypeByPosition( ai_iBusinessMethodHandle, i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tType: <%d>\n", i8Number ) ;
    }
    
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ End Business Method ==========================================\n" ) ;

    return( M4_SUCCESS ) ;
}



m4return_t  ClCompiledMCR :: _PrintStatistics( ClMdStatistics *ai_poStatistics, FILE* ai_pfFile, m4uint8_t ai_iIndent )
{

	m4uint32_t	i32Number ;
	m4uint32_t	i32Size ;
	m4uint32_t	i32Total ;
	m4uint32_t	i32ItemsNumber ;
	m4uint32_t	i32ItemsSize ;

    m4uint16_t  i ;
    m4char_t    acIndent[ 10 ] ;


    for( i = 0 ; i < ai_iIndent ; i++ )
    {
        acIndent[ i ] = '\t' ;
    }

    acIndent[ i ] = '\0' ;


    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ Statistics ===================================================\n" ) ;

	if( ai_poStatistics == NULL )
	{
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "No Statistics\n" ) ;
	}
	else
	{
		i32Total = 0 ;

		i32Number = ai_poStatistics->GetTimes( M4MDRT_STT_M4OBJ ) ;
		i32Size = ai_poStatistics->GetValue( M4MDRT_STT_M4OBJ ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "M4Objects: \t\t<%d>\t\tSize: <%d>\n", i32Number, i32Size ) ;

		i32Total += i32Size ;

		i32Number = ai_poStatistics->GetTimes( M4MDRT_STT_CONNECTOR ) ;
		i32Size = ai_poStatistics->GetValue( M4MDRT_STT_CONNECTOR ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "Conectors: \t\t<%d>\t\tSize: <%d>\n", i32Number, i32Size ) ;

		i32Total += i32Size ;

		i32Number = ai_poStatistics->GetTimes( M4MDRT_STT_FILTER ) ;
		i32Size = ai_poStatistics->GetValue( M4MDRT_STT_FILTER ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "Filters: \t\t<%d>\t\tSize: <%d>\n", i32Number, i32Size ) ;

		i32Total += i32Size ;

		i32Number = ai_poStatistics->GetTimes( M4MDRT_STT_FORMULAS ) ;
		i32Size = ai_poStatistics->GetValue( M4MDRT_STT_FORMULAS ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "Formulas: \t\t<%d>\t\tSize: <%d>\n", i32Number, i32Size ) ;

		i32Total += i32Size ;

		i32Number = ai_poStatistics->GetTimes( M4MDRT_STT_INDEX ) ;
		i32Size = ai_poStatistics->GetValue( M4MDRT_STT_INDEX ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "Indexes: \t\t<%d>\t\tSize: <%d>\n", i32Number, i32Size ) ;

		i32Total += i32Size ;

		i32Number = ai_poStatistics->GetTimes( M4MDRT_STT_INSTANCE ) ;
		i32Size = ai_poStatistics->GetValue( M4MDRT_STT_INSTANCE ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "Instances: \t\t<%d>\t\tSize: <%d>\n", i32Number, i32Size ) ;

		i32Total += i32Size ;

		i32Number = ai_poStatistics->GetTimes( M4MDRT_STT_T3_ITEM_CON ) ;
		i32Size = ai_poStatistics->GetValue( M4MDRT_STT_T3_ITEM_CON ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "M4Obj Item Connectors: \t<%d>\t\tSize: <%d>\n", i32Number, i32Size ) ;

		i32Total += i32Size ;

		i32ItemsNumber = 0 ;
		i32ItemsSize = 0 ;

		i32Number = ai_poStatistics->GetTimes( M4MDRT_STT_ITEM_METHOD ) ;
		i32Size = ai_poStatistics->GetValue( M4MDRT_STT_ITEM_METHOD ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "\tItems Method: \t\t<%d>\t\tSize: <%d>\n", i32Number, i32Size ) ;

		i32ItemsNumber += i32Number ;
		i32ItemsSize += i32Size ;

		i32Number = ai_poStatistics->GetTimes( M4MDRT_STT_ITEM_PROPERTY ) ;
		i32Size = ai_poStatistics->GetValue( M4MDRT_STT_ITEM_PROPERTY ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "\tItems Property: \t<%d>\t\tSize: <%d>\n", i32Number, i32Size ) ;

		i32ItemsNumber += i32Number ;
		i32ItemsSize += i32Size ;

		i32Number = ai_poStatistics->GetTimes( M4MDRT_STT_ITEM_FIELD ) ;
		i32Size = ai_poStatistics->GetValue( M4MDRT_STT_ITEM_FIELD ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "\tItems Field: \t\t<%d>\t\tSize: <%d>\n", i32Number, i32Size ) ;

		i32ItemsNumber += i32Number ;
		i32ItemsSize += i32Size ;

		i32Number = ai_poStatistics->GetTimes( M4MDRT_STT_ITEM_CONCEPT ) ;
		i32Size = ai_poStatistics->GetValue( M4MDRT_STT_ITEM_CONCEPT ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "\tItems Concept: \t\t<%d>\t\tSize: <%d>\n", i32Number, i32Size ) ;

		i32ItemsNumber += i32Number ;
		i32ItemsSize += i32Size ;

		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "Items: \t\t\t<%d>\t\tSize: <%d>\n", i32ItemsNumber, i32ItemsSize ) ;

		i32Total += i32ItemsSize ;

		i32Number = ai_poStatistics->GetTimes( M4MDRT_STT_GROUP ) ;
		i32Size = ai_poStatistics->GetValue( M4MDRT_STT_GROUP ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "Groups: \t\t<%d>\t\tSize: <%d>\n", i32Number, i32Size ) ;

		i32Total += i32Size ;

		i32Number = ai_poStatistics->GetTimes( M4MDRT_STT_ITEM_CON ) ;
		i32Size = ai_poStatistics->GetValue( M4MDRT_STT_ITEM_CON ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "Item Connectors: \t<%d>\t\tSize: <%d>\n", i32Number, i32Size ) ;

		i32Total += i32Size ;

		i32ItemsNumber = 0 ;
		i32ItemsSize = 0 ;

		i32Number = ai_poStatistics->GetTimes( M4MDRT_STT_RITEM_METHOD ) ;
		i32Size = ai_poStatistics->GetValue( M4MDRT_STT_RITEM_METHOD ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "\tRef Items Method: \t<%d>\t\tSize: <%d>\n", i32Number, i32Size ) ;

		i32ItemsNumber += i32Number ;
		i32ItemsSize += i32Size ;

		i32Number = ai_poStatistics->GetTimes( M4MDRT_STT_RITEM_PROPERTY ) ;
		i32Size = ai_poStatistics->GetValue( M4MDRT_STT_RITEM_PROPERTY ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "\tRef Items Property: \t<%d>\t\tSize: <%d>\n", i32Number, i32Size ) ;

		i32ItemsNumber += i32Number ;
		i32ItemsSize += i32Size ;

		i32Number = ai_poStatistics->GetTimes( M4MDRT_STT_RITEM_FIELD ) ;
		i32Size = ai_poStatistics->GetValue( M4MDRT_STT_RITEM_FIELD ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "\tRef Items Field: \t<%d>\t\tSize: <%d>\n", i32Number, i32Size ) ;

		i32ItemsNumber += i32Number ;
		i32ItemsSize += i32Size ;

		i32Number = ai_poStatistics->GetTimes( M4MDRT_STT_RITEM_CONCEPT ) ;
		i32Size = ai_poStatistics->GetValue( M4MDRT_STT_RITEM_CONCEPT ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "\tRef Items Concept: \t<%d>\t\tSize: <%d>\n", i32Number, i32Size ) ;

		i32ItemsNumber += i32Number ;
		i32ItemsSize += i32Size ;

		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "Reference Items: \t<%d>\t\tSize: <%d>\n", i32ItemsNumber, i32ItemsSize ) ;

		i32Total += i32ItemsSize ;

		i32Number = ai_poStatistics->GetTimes( M4MDRT_STT_NITEM ) ;
		i32Size = ai_poStatistics->GetValue( M4MDRT_STT_NITEM ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "Node Items: \t\t<%d>\t\tSize: <%d>\n", i32Number, i32Size ) ;

		i32Total += i32Size ;

		i32Number = ai_poStatistics->GetTimes( M4MDRT_STT_NODE ) ;
		i32Size = ai_poStatistics->GetValue( M4MDRT_STT_NODE ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "Nodes: \t\t\t<%d>\t\tSize: <%d>\n", i32Number, i32Size ) ;

		i32Total += i32Size ;

		i32Number = ai_poStatistics->GetTimes( M4MDRT_STT_T3_CON ) ;
		i32Size = ai_poStatistics->GetValue( M4MDRT_STT_T3_CON ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "M4Obj Connectors: \t<%d>\t\tSize: <%d>\n", i32Number, i32Size ) ;

		i32Total += i32Size ;

		i32Number = ai_poStatistics->GetTimes( M4MDRT_STT_SENTENCE ) ;
		i32Size = ai_poStatistics->GetValue( M4MDRT_STT_SENTENCE ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "Sentences: \t\t<%d>\t\tSize: <%d>\n", i32Number, i32Size ) ;

		i32Total += i32Size ;

		i32Number = ai_poStatistics->GetTimes( M4MDRT_STT_TI ) ;
		i32Size = ai_poStatistics->GetValue( M4MDRT_STT_TI ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "Tis: \t\t\t<%d>\t\tSize: <%d>\n", i32Number, i32Size ) ;

		i32Total += i32Size ;

		i32Number = ai_poStatistics->GetTimes( M4MDRT_STT_BUSINESS_METHOD ) ;
		i32Size = ai_poStatistics->GetValue( M4MDRT_STT_BUSINESS_METHOD ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "Business Methods: \t\t\t<%d>\t\tSize: <%d>\n", i32Number, i32Size ) ;

		i32Total += i32Size ;

		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "Structures Size: \t<%d>\n", i32Total ) ;

		i32Size = GetChannelPool() ;
		i32Total += i32Size ;

		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "Total Size: \t\t<%d>\n", i32Total ) ;

		i32Size = GetChannelSize() ;

		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "Empty Size: \t\t<%d>\n", i32Size - i32Total ) ;
	}

	fprintf( ai_pfFile, acIndent ) ;
	fprintf( ai_pfFile, "============ End Statistics ===============================================\n" ) ;


    return( M4_SUCCESS ) ;
}


m4return_t  ClCompiledMCR :: _PrintM4Obj( ClMdStatistics *ai_poStatistics, FILE* ai_pfFile, m4uint8_t ai_iIndent )
{

	m4uint32_t		i32Number ;
	m4uint16_t		i16Number ;
	m4uint8_t		iInherits ;
	m4uint8_t		i8Number ;
    m4date_t		dDate ;
    m4pcchar_t		pccString ;

    m4uint16_t		i, j ;
    m4uint16_t		iLength ;
    m4uint16_t		i16Aux ;
	m4uint32_t		i32Aux ;
	m4uint32_t		iTotalItems ;
    m4pcchar_t		pcAux ;
    m4char_t		acDate[ M4_SECOND_END + 1 ] ;
    m4char_t		acIndent[ 10 ] ;

	ClLongString	oString ;


	oString.Init( 2000, 500 ) ;

    for( i = 0 ; i < ai_iIndent ; i++ )
    {
        acIndent[ i ] = '\t' ;
    }

    acIndent[ i ] = '\0' ;


    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ M4Obj =====================================================\n" ) ;

    i32Number = GetChannelSize() ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Size: <%d>\n", i32Number ) ;

/*
    i16Number = GetChannelBuild() ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Build: <%d>\n", i16Number ) ;
*/

    i8Number = GetChannelTimeUnit() ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Time Unit: <%d>\n", i8Number ) ;

    i8Number = GetChannelCsType() ;
    pccString = M4ClCsType( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Cs Type: <%s>\n", pccString ) ;

    i8Number = GetChannelLanguage() ;
    pccString = M4ClLanguage( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Language: <%s>\n", pccString ) ;

    dDate = GetChannelStartDate() ;
    ClDateToString( dDate, acDate, M4_SECOND_END + 1 ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Start Date: <%s>\n", acDate ) ;

    dDate = GetChannelEndDate() ;
    ClDateToString( dDate, acDate, M4_SECOND_END + 1 ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "End Date: <%s>\n", acDate ) ;

    dDate = GetChannelCorStartDate() ;
    ClDateToString( dDate, acDate, M4_SECOND_END + 1 ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Correction Start Date: <%s>\n", acDate ) ;

    dDate = GetChannelCorEndDate() ;
    ClDateToString( dDate, acDate, M4_SECOND_END + 1 ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Correction End Date: <%s>\n", acDate ) ;

    dDate = GetChannelVersion() ;
    ClDateToString( dDate, acDate, M4_SECOND_END + 1 ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Version: <%s>\n", acDate ) ;

/*
    dDate = GetChannelCreationDate() ;
    ClDateToString( dDate, acDate, M4_SECOND_END + 1 ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Creation Date: <%s>\n", acDate ) ;
*/

    pccString = GetChannelId() ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "M4Obj Id: <%s>\n", pccString ) ;

    pccString = GetChannelName() ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Name: <%s>\n", pccString ) ;

    pccString = GetChannelOleClassId() ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Ole Class Id: <%s>\n", pccString ) ;

    pccString = GetChannelServiceId() ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Service Id: <%s>\n", pccString ) ;

    pccString = GetChannelServiceAltId() ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Service Alt Id: <%s>\n", pccString ) ;

    i8Number = GetChannelIsExternal() ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Is External: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetChannelType() ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Type: <%d>\n", i8Number ) ;

    i8Number = GetChannelHasSecurity() ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Has Security: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetChannelIsCacheable() ;
    pccString = M4ClCacheable( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Is Cacheable: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetChannelIsMDCacheable() ;
    pccString = M4ClCacheable( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Is MD Cacheable: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetChannelCheckConcurrency() ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Check Concurrency: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetChannelOrganizationType() ;
    pccString = M4ClOrganizationType( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Organization Type: <%d - %s>\n", i8Number, pccString ) ;
	
    iInherits = GetChannelInheritLevel() ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Inherit Level: <%d>\n", iInherits ) ;

    i8Number = GetChannelDataLanguage() ;
    pccString = M4ClLanguageType( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Data Language: <%d - %s>\n", i8Number, pccString ) ;
	
    i8Number = GetChannelMetaLanguage() ;
    pccString = M4ClLanguageType( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Meta Language: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetChannelCreationType() ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Creation Type: <%d>\n", i8Number ) ;
	
    i8Number = GetChannelStyleUse() ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Style Use: <%d>\n", i8Number ) ;
	
    i8Number = GetChannelWSSSecurity() ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "WSS Security: <%d>\n", i8Number ) ;
	
	
    dDate = GetChannelCacheMaxPeriod() ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Cache Max Period: <%f>\n", dDate ) ;

    i8Number = GetChannelIsSeparable() ;
    pccString = M4ClBool( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "is Separable: <%d - %s>\n", i8Number, pccString ) ;

    i8Number = GetChannelCsExeType() ;
    pccString = M4ClCsExeType( i8Number ) ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Cs Exe Type: <%d - %s>\n", i8Number, pccString ) ;

	i16Number = GetChannelSecurity() ;
	fprintf( ai_pfFile, acIndent ) ;
	fprintf( ai_pfFile, "Security: <%d>\n", i16Number ) ;

    i16Number = GetChannelVMCapacityReq() ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "MV Capacity Required: <%d>\n", i16Number ) ;

    i32Number = GetChannelEnvironmentVars() ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Environment Vars: <%d>\n", i32Number ) ;

    i32Number = GetChannelOwnerFlag() ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Owner Flag: <%d>\n", i32Number ) ;

    i32Number = GetChannelPool() ;
    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Pool: <%d>\n", i32Number ) ;

    i32Number = GetChannelSysLoadItem() ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "SysLoad Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "SysLoad Item: <%d>\n", i32Number ) ;
    }

    i32Number = GetChannelSysPersistItem() ;
    fprintf( ai_pfFile, acIndent ) ;
    if( i32Number != 0 )
    {
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, "SysPersist Item: <%d - %s>\n", i32Number, pccString ) ;
    }
    else
    {
        fprintf( ai_pfFile, "SysPersist Item: <%d>\n", i32Number ) ;
    }

    pccString = GetLaneFatherChannelId() ;
	fprintf( ai_pfFile, acIndent ) ;
    if( pccString == NULL )
    {
		pccString = "NULL" ;
	}
	fprintf( ai_pfFile, "Lane Father M4Obj Id: <%s>\n", pccString ) ;

    pccString = GetLaneFatherNodeId() ;
	fprintf( ai_pfFile, acIndent ) ;
    if( pccString == NULL )
    {
		pccString = "NULL" ;
	}
	fprintf( ai_pfFile, "Lane Father Node Id: <%s>\n", pccString ) ;

    pccString = GetLaneSonNodeId() ;
	fprintf( ai_pfFile, acIndent ) ;
    if( pccString == NULL )
    {
		pccString = "NULL" ;
	}
	fprintf( ai_pfFile, "Lane Son Node Id: <%s>\n", pccString ) ;

    iLength = GetChannelNumberOfRoots() ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Roots: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<%d>\n", i ) ;

        pccString = GetChannelRootIdByPosition( i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tRoot Id: <%s>\n", pccString ) ;

        i32Number = GetChannelRootHandleById( pccString, M4_TRUE ) ;
        pccString = GetNodeId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tRoot Handle By Id: <%d - %s>\n", i32Number, pccString ) ;

        i32Number = GetChannelRootHandleByPosition( i ) ;
        pccString = GetNodeId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tRoot Handle By Position: <%d - %s>\n", i32Number, pccString ) ;
    }


    iLength = GetChannelNumberOfNodes() ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Nodes: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<%d>\n", i ) ;

        pccString = GetChannelNodeIdByPosition( i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tNode Id: <%s>\n", pccString ) ;

        i32Number = GetChannelNodeHandleById( pccString, M4_TRUE ) ;
        pccString = GetNodeId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tNode Handle By Id: <%d - %s>\n", i32Number, pccString ) ;

        i32Number = GetChannelNodeHandleByPosition( i ) ;
        pccString = GetNodeId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tNode Handle By Position: <%d - %s>\n", i32Number, pccString ) ;

        _PrintNode( i32Number, oString, ai_pfFile, ai_iIndent + 1 ) ;
    }


    iLength = GetChannelNumberOfSentences() ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Sentences: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<%d>\n", i ) ;

        pccString = GetChannelSentenceIdByPosition( i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tSentence Id: <%s>\n", pccString ) ;

        i32Number = GetChannelSentenceHandleById( pccString, M4_TRUE ) ;
        pccString = GetSentenceId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tSentence Handle By Id: <%d - %s>\n", i32Number, pccString ) ;

        i32Number = GetChannelSentenceHandleByPosition( i ) ;
        pccString = GetSentenceId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tSentence Handle By Position: <%d - %s>\n", i32Number, pccString ) ;

        _PrintSentence( i32Number, ai_pfFile, ai_iIndent + 1 ) ;
    }


    iLength = GetChannelNumberOfInstances() ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Instances: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<%d>\n", i ) ;

        pccString = GetChannelInstanceIdByPosition( i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tInstance Id: <%s>\n", pccString ) ;

        i32Number = GetChannelInstanceHandleById( pccString, M4_TRUE ) ;
        pccString = GetInstanceId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tInstance Handle By Id: <%d - %s>\n", i32Number, pccString ) ;

        i32Number = GetChannelInstanceHandleByPosition( i ) ;
        pccString = GetInstanceId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tInstance Handle By Position: <%d - %s>\n", i32Number, pccString ) ;

        _PrintInstance( i32Number, ai_pfFile, ai_iIndent + 1 ) ;
    }

    
    iLength = GetChannelNumberOfItems() ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Items: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<%d>\n", i ) ;

        pccString = GetChannelItemIdByPosition( i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tItem Id: <%s>\n", pccString ) ;

        i32Number = GetChannelItemHandleById( pccString, M4_TRUE ) ;
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tItem Handle By Id: <%d - %s>\n", i32Number, pccString ) ;

        i32Number = GetChannelItemHandleByPosition( i ) ;
        pccString = GetItemId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tItem Handle By Position: <%d - %s>\n", i32Number, pccString ) ;

        _PrintItem( i32Number, oString, ai_pfFile, ai_iIndent + 1 ) ;
    }

    
    iLength = GetChannelNumberOfParameters() ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Parameters: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<%d>\n", i ) ;

        i32Number = GetChannelParameterHandleByPosition( i ) ;
		i32Aux = GetItemNodeHandle( i32Number ) ;
		pccString = GetItemId( i32Number ) ;
		pcAux = GetNodeId( i32Aux ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tParameter By Position: <%d.%d - %s.%s>\n", i32Aux, i32Number, pcAux, pccString ) ;
    }


    iLength = GetChannelNumberOfRSMs() ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "RSMs: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<%d>\n", i ) ;

        pccString = GetChannelRSMIdByPosition( i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tRSM Id: <%s>\n", pccString ) ;

        pccString = GetChannelRSMMaskById( pccString, M4_TRUE ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tRSM By Id: <%s>\n", pccString ) ;

        pccString = GetChannelRSMMaskIdByPosition( i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tRSM Mask By Position: <%s>\n", pccString ) ;
    }


    iLength = GetChannelNumberOfBusinessMethods() ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Business Methods: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<%d>\n", i ) ;

        pccString = GetChannelBusinessMethodIdByPosition( i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tBusiness Method Id: <%s>\n", pccString ) ;

        i32Number = GetChannelBusinessMethodHandleById( pccString, M4_TRUE ) ;
        pccString = GetBusinessMethodId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tBusiness Method By Id: <%d - %s>\n", i32Number, pccString ) ;

        i32Number = GetChannelBusinessMethodHandleByPosition( i ) ;
        pccString = GetBusinessMethodId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tBusiness Method Handle By Position: <%d - %s>\n", i32Number, pccString ) ;

        _PrintBusinessMethod( i32Number, ai_pfFile, ai_iIndent + 1 ) ;
    }


	iTotalItems = 0 ;

    iLength = GetChannelNumberOfTis() ;

    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Tis: <%d>\n", iLength ) ;

    for( i = 0 ; i < iLength ; i++ )
    {
		fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<%d>\n", i ) ;

        pccString = GetChannelTiIdByPosition( i ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tTi Id: <%s>\n", pccString ) ;

        i32Number = GetChannelTiHandleById( pccString ) ;
		pccString = GetTiId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tTi Handle By Id: <%d - %s>\n", i32Number, pccString ) ;

        i32Number = GetChannelTiHandleByPosition( i ) ;
        pccString = GetTiId( i32Number ) ;
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\tTi Handle By Position: <%d - %s>\n", i32Number, pccString ) ;


		i16Aux = GetTiNumberOfItems( i32Number ) ;

		iTotalItems += i16Aux ;

		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "\tItems: <%d>\n", i16Aux ) ;

		for( j = 0 ; j < i16Aux ; j++ )
		{
			i32Aux = GetTiItemHandleByPosition( i32Number, j ) ;
			pccString = m_pcBase + M4ClUnPackInt32( m_pcBase, i32Aux + M4CL_MCR_ITEM_ID  ) ;
			fprintf( ai_pfFile, acIndent ) ;
			fprintf( ai_pfFile, "\t\t<%d> Item : <%d - %s>\n", j, i32Aux, pccString ) ;
		}

		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "\tTi References: <%d>\n", iInherits ) ;

		for( j = 0 ; j < iInherits ; j++ )
		{
			i32Aux = GetTiReferenceNodeHandleByPosition( i32Number, j ) ;

			fprintf( ai_pfFile, acIndent ) ;
			if( i32Aux == 0 )
			{
				fprintf( ai_pfFile, "\t\t<%d> Node : <%d>\n", j, i32Aux ) ;
			}
			else
			{
				pccString = GetNodeId( i32Aux ) ;
				fprintf( ai_pfFile, "\t\t<%d> Node : <%d - %s>\n", j, i32Aux, pccString ) ;
			}

			i32Aux = GetTiReferenceNumberByPosition( i32Number, j ) ;
			fprintf( ai_pfFile, acIndent ) ;
			fprintf( ai_pfFile, "\t\t<%d> References : <%d>\n", j, i32Aux ) ;
		}
    }

    i32Number = GetChannelTiSystemHandle() ;

	if( i32Number != 0 )
	{
        fprintf( ai_pfFile, acIndent ) ;
        fprintf( ai_pfFile, "\t<TI_SYSTEM>\n" ) ;

		pccString = m_pcBase + M4ClUnPackInt32( m_pcBase, i32Number + M4CL_MCR_TI_ID_TI ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "\tSystem Ti Handle: <%d - %s>\n", i32Number, pccString ) ;

		i16Aux = GetTiNumberOfItems( i32Number ) ;

		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "\tItems: <%d>\n", i16Aux ) ;

		for( j = 0 ; j < i16Aux ; j++ )
		{
			i32Aux = GetTiItemHandleByPosition( i32Number, j ) ;
			pccString = m_pcBase + M4ClUnPackInt32( m_pcBase, i32Aux + M4CL_MCR_ITEM_ID  ) ;
			fprintf( ai_pfFile, acIndent ) ;
			fprintf( ai_pfFile, "\t\t<%d> Item : <%d - %s>\n", j, i32Aux, pccString ) ;
		}
	}


	fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Total Items: <%d>\n", iTotalItems ) ;


    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "Generated Items:\n" ) ;

    i32Number = GetChannelSysLoadClientHandle() ;
	fprintf( ai_pfFile, acIndent ) ;

	if( i32Number != 0 )
	{
		pccString = m_pcBase + M4ClUnPackInt32( m_pcBase, i32Number + M4CL_MCR_ITEM_ID  ) ;
		fprintf( ai_pfFile, "\tSysLoadClient Item: <%d - %s>\n", i32Number, pccString ) ;
	}
	else
	{
		fprintf( ai_pfFile, "\tSysLoadClient Item: <%d>\n", i32Number ) ;
	}

    i32Number = GetChannelSysPersistClientHandle() ;
	fprintf( ai_pfFile, acIndent ) ;

	if( i32Number != 0 )
	{
		pccString = m_pcBase + M4ClUnPackInt32( m_pcBase, i32Number + M4CL_MCR_ITEM_ID  ) ;
		fprintf( ai_pfFile, "\tSysPersistClient Item: <%d - %s>\n", i32Number, pccString ) ;
	}
	else
	{
		fprintf( ai_pfFile, "\tSysPersistClient Item: <%d>\n", i32Number ) ;
	}

    i32Number = GetChannelSysLoadServerHandle() ;
	fprintf( ai_pfFile, acIndent ) ;

	if( i32Number != 0 )
	{
		pccString = m_pcBase + M4ClUnPackInt32( m_pcBase, i32Number + M4CL_MCR_ITEM_ID  ) ;
		fprintf( ai_pfFile, "\tSysLoadServer Item: <%d - %s>\n", i32Number, pccString ) ;
	}
	else
	{
		fprintf( ai_pfFile, "\tSysLoadServer Item: <%d>\n", i32Number ) ;
	}

    i32Number = GetChannelSysPersistServerHandle() ;
	fprintf( ai_pfFile, acIndent ) ;

	if( i32Number != 0 )
	{
		pccString = m_pcBase + M4ClUnPackInt32( m_pcBase, i32Number + M4CL_MCR_ITEM_ID  ) ;
		fprintf( ai_pfFile, "\tSysPersistServer Item: <%d - %s>\n", i32Number, pccString ) ;
	}
	else
	{
		fprintf( ai_pfFile, "\tSysPersistServer Item: <%d>\n", i32Number ) ;
	}

    i32Number = GetChannelExecuteReportHandle() ;
	fprintf( ai_pfFile, acIndent ) ;

	if( i32Number != 0 )
	{
		pccString = m_pcBase + M4ClUnPackInt32( m_pcBase, i32Number + M4CL_MCR_ITEM_ID  ) ;
		fprintf( ai_pfFile, "\tExecuteReport Item: <%d - %s>\n", i32Number, pccString ) ;
	}
	else
	{
		fprintf( ai_pfFile, "\tExecuteReport Item: <%d>\n", i32Number ) ;
	}

    i32Number = GetChannelDynFilterHandle() ;
	fprintf( ai_pfFile, acIndent ) ;

	if( i32Number != 0 )
	{
		pccString = m_pcBase + M4ClUnPackInt32( m_pcBase, i32Number + M4CL_MCR_ITEM_ID  ) ;
		fprintf( ai_pfFile, "\tDynFilter Item: <%d - %s>\n", i32Number, pccString ) ;
	}
	else
	{
		fprintf( ai_pfFile, "\tDynFilter Item: <%d>\n", i32Number ) ;
	}

    
	_PrintStatistics( ai_poStatistics, ai_pfFile, ai_iIndent + 1 ) ;
    

	fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ End M4Obj =================================================\n" ) ;

    return( M4_SUCCESS ) ;
}


m4return_t  ClCompiledMCR :: PrintM4Obj( m4uint8_t ai_iSystemDebug, m4pcchar_t ai_pccPath, ClMdStatistics *ai_poStatistics )
{

	m4return_t	iResult ;
    m4char_t	acFile[ M4CH_MAX_FILE + 1 ] ;
    FILE        *pfFile ;


	if( ai_iSystemDebug < 2 )
	{
		return( M4_SUCCESS ) ;
	}
    
    if( ai_pccPath != 0 && *ai_pccPath != '\0' )
    {
        sprintf( acFile, "%s%s%s&%d.mt", ai_pccPath, M4_BACK_SLASH, GetChannelId(), GetChannelCsType() ) ;
    }
    else
    {
        sprintf( acFile, "%s&%d.mt", GetChannelId(), GetChannelCsType() ) ;
    }

	// UNICODE FILE
	eUniFileEncodingType_t eEncoding = M4UniNative ;

    pfFile = M4Fopen( acFile, M4UniWrite, eEncoding ) ;

    if( pfFile != NULL )
    {
        iResult = _PrintM4Obj( ai_poStatistics, pfFile ) ;

        if( iResult != M4_SUCCESS )
        {
            fprintf( pfFile, "Error Printing MetaM4Obj\n" ) ;
        }
        fclose( pfFile)  ;
    }

    return( iResult ) ;
}




m4return_t  ClCompiledMCR :: _PrintSecurity( FILE* ai_pfFile, m4uint8_t ai_iIndent )
{

	m4uint32_t	i32Number ;
	m4uint16_t	i16Number ;
	m4uint8_t	i8Number ;
    m4date_t    dDate ;
    m4pcchar_t  pccString ;

    m4uint16_t  i, j ;
    m4uint16_t  iLength ;
    m4uint16_t  i16Aux ;
	m4uint32_t	i32Aux ;
    m4pcchar_t  pcAux ;
    m4char_t    acDate[ M4_SECOND_END + 1 ] ;
    m4char_t    acIndent[ 10 ] ;


    for( i = 0 ; i < ai_iIndent ; i++ )
    {
        acIndent[ i ] = '\t' ;
    }

    acIndent[ i ] = '\0' ;


    fprintf( ai_pfFile, acIndent ) ;
    fprintf( ai_pfFile, "============ Security =====================================================\n" ) ;

	if( m_pcSecurity == NULL )
	{
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "No security Applied\n" ) ;
	}
	else
	{
		i32Number = GetSecuritySize() ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "Size: <%d>\n", i32Number ) ;

		i16Number = GetSecurityBuild() ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "Build: <%d>\n", i16Number ) ;

		i8Number = GetSecurityCsType() ;
		pccString = M4ClCsType( i8Number ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "Cs Type: <%d - %s>\n", i8Number, pccString ) ;

		dDate = GetSecurityT3Version() ;
		ClDateToString( dDate, acDate, M4_SECOND_END + 1 ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "M4Obj Version: <%s>\n", acDate ) ;

		dDate = GetSecurityOwnVersion() ;
		ClDateToString( dDate, acDate, M4_SECOND_END + 1 ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "Security Version: <%s>\n", acDate ) ;

		pccString = GetSecurityMaskId() ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "Mask: <%s>\n", pccString ) ;

		pccString = GetSecurityChannelId() ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "M4Obj: <%s>\n", pccString ) ;

		i16Number = GetSecurityNumberOfNodes() ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "Nodes: <%d>\n", i16Number ) ;

		i8Number = GetChannelSecRead() ;
		pccString = M4ClSecurity( i8Number ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "M4Obj Security Read: <%d - %s>\n", i8Number, pccString ) ;

		i8Number = GetChannelSecWrite() ;
		pccString = M4ClSecurity( i8Number ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "M4Obj Security Write: <%d - %s>\n", i8Number, pccString ) ;

		i8Number = GetChannelSecDelete() ;
		pccString = M4ClSecurity( i8Number ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "M4Obj Security Delete: <%d - %s>\n", i8Number, pccString ) ;

		i8Number = GetChannelSecUpdate() ;
		pccString = M4ClSecurity( i8Number ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "M4Obj Security Update: <%d - %s>\n", i8Number, pccString ) ;

		i8Number = GetChannelSecExecute() ;
		pccString = M4ClSecurity( i8Number ) ;
		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "M4Obj Security Execute: <%d - %s>\n", i8Number, pccString ) ;


		iLength = GetChannelNumberOfNodes() ;

		fprintf( ai_pfFile, acIndent ) ;
		fprintf( ai_pfFile, "Nodes: <%d>\n", iLength ) ;

		for( i = 0 ; i < iLength ; i++ )
		{
			fprintf( ai_pfFile, acIndent ) ;
			fprintf( ai_pfFile, "\t<%d>\n", i ) ;

			i32Number = GetChannelNodeHandleByPosition( i ) ;
			pccString = GetNodeId( i32Number ) ;
			fprintf( ai_pfFile, acIndent ) ;
			fprintf( ai_pfFile, "\tNode Handle By Position: <%d - %s>\n", i32Number, pccString ) ;

			i8Number = GetNodeSecRead( i32Number ) ;
			pccString = M4ClSecurity( i8Number ) ;
			fprintf( ai_pfFile, acIndent ) ;
			fprintf( ai_pfFile, "\tNode Security Read: <%d - %s>\n", i8Number, pccString ) ;

			i8Number = GetNodeSecWrite( i32Number ) ;
			pccString = M4ClSecurity( i8Number ) ;
			fprintf( ai_pfFile, acIndent ) ;
			fprintf( ai_pfFile, "\tNode Security Write: <%d - %s>\n", i8Number, pccString ) ;

			i8Number = GetNodeSecDelete( i32Number ) ;
			pccString = M4ClSecurity( i8Number ) ;
			fprintf( ai_pfFile, acIndent ) ;
			fprintf( ai_pfFile, "\tNode Security Delete: <%d - %s>\n", i8Number, pccString ) ;

			i8Number = GetNodeSecUpdate( i32Number ) ;
			pccString = M4ClSecurity( i8Number ) ;
			fprintf( ai_pfFile, acIndent ) ;
			fprintf( ai_pfFile, "\tNode Security Update: <%d - %s>\n", i8Number, pccString ) ;

			i8Number = GetNodeSecExecute( i32Number ) ;
			pccString = M4ClSecurity( i8Number ) ;
			fprintf( ai_pfFile, acIndent ) ;
			fprintf( ai_pfFile, "\tNode Security Execute: <%d - %s>\n", i8Number, pccString ) ;

			i8Number = GetNodeSecDynFilter( i32Number ) ;
			pccString = M4ClSecurity( i8Number ) ;
			fprintf( ai_pfFile, acIndent ) ;
			fprintf( ai_pfFile, "\tNode Security Dyn Filter: <%d - %s>\n", i8Number, pccString ) ;

			pccString = GetNodeSecFilter( i32Number ) ;
			if( pccString == NULL )
			{
				pccString = "NULL" ;
			}
			fprintf( ai_pfFile, acIndent ) ;
			fprintf( ai_pfFile, "\tNode Security Filter: <%s>\n", pccString ) ;


			i16Aux = GetNodeNumberOfItems( i32Number ) ;

			fprintf( ai_pfFile, acIndent ) ;
			fprintf( ai_pfFile, "\tItems: <%d>\n", i16Aux ) ;

			for( j = 0 ; j < i16Aux ; j++ )
			{
				fprintf( ai_pfFile, acIndent ) ;
				fprintf( ai_pfFile, "\t\t<%d>\n", j ) ;

				i32Aux = GetNodeItemHandleByPosition( i32Number, j ) ;
				pccString = GetItemId( i32Aux ) ;
				fprintf( ai_pfFile, acIndent ) ;
				fprintf( ai_pfFile, "\t\tItem Handle By Position: <%d - %s>\n", i32Aux, pccString ) ;

				i8Number = GetItemSecRead( i32Aux ) ;
				pccString = M4ClSecurity( i8Number ) ;
				fprintf( ai_pfFile, acIndent ) ;
				fprintf( ai_pfFile, "\t\tItem Security Read: <%d - %s>\n", i8Number, pccString ) ;

				i8Number = GetItemSecWrite( i32Aux ) ;
				pccString = M4ClSecurity( i8Number ) ;
				fprintf( ai_pfFile, acIndent ) ;
				fprintf( ai_pfFile, "\t\tItem Security Write: <%d - %s>\n", i8Number, pccString ) ;

				i8Number = GetItemSecDelete( i32Aux ) ;
				pccString = M4ClSecurity( i8Number ) ;
				fprintf( ai_pfFile, acIndent ) ;
				fprintf( ai_pfFile, "\t\tItem Security Delete: <%d - %s>\n", i8Number, pccString ) ;

				i8Number = GetItemSecUpdate( i32Aux ) ;
				pccString = M4ClSecurity( i8Number ) ;
				fprintf( ai_pfFile, acIndent ) ;
				fprintf( ai_pfFile, "\t\tItem Security Update: <%d - %s>\n", i8Number, pccString ) ;

				i8Number = GetItemSecExecute( i32Aux ) ;
				pccString = M4ClSecurity( i8Number ) ;
				fprintf( ai_pfFile, acIndent ) ;
				fprintf( ai_pfFile, "\t\tItem Security Execute: <%d - %s>\n", i8Number, pccString ) ;

				i8Number = GetItemSecContinue( i32Aux ) ;
				pccString = M4ClSecurity( i8Number ) ;
				fprintf( ai_pfFile, acIndent ) ;
				fprintf( ai_pfFile, "\t\tItem Security Continue: <%d - %s>\n", i8Number, pccString ) ;
			}


			i16Aux = GetNodeNumberOfQBFFilters( i32Number ) ;

			fprintf( ai_pfFile, acIndent ) ;
			fprintf( ai_pfFile, "\tFilters: <%d>\n", i16Aux ) ;

			for( j = 0 ; j < i16Aux ; j++ )
			{
				fprintf( ai_pfFile, acIndent ) ;
				fprintf( ai_pfFile, "\t\t<%d>\n", j ) ;

				i32Aux = GetNodeQBFFilterHandleByPosition( i32Number, j ) ;
				pccString = GetFilterId( i32Aux ) ;
				fprintf( ai_pfFile, acIndent ) ;
				fprintf( ai_pfFile, "\t\tFilter Handle By Position: <%d - %s>\n", i32Aux, pccString ) ;

				i8Number = GetFilterIsApplicable( i32Aux ) ;
				pccString = M4ClBool( i8Number ) ;
				fprintf( ai_pfFile, acIndent ) ;
				fprintf( ai_pfFile, "\t\tFilter Is Applicable: <%d - %s>\n", i8Number, pccString ) ;
			}


			i16Aux = GetNodeNumberOfFindFilters( i32Number ) ;

			fprintf( ai_pfFile, acIndent ) ;
			fprintf( ai_pfFile, "\tFind Filters: <%d>\n", i16Aux ) ;

			for( j = 0 ; j < i16Aux ; j++ )
			{
				fprintf( ai_pfFile, acIndent ) ;
				fprintf( ai_pfFile, "\t\t<%d>\n", j ) ;

				i32Aux = GetNodeFindFilterHandleByPosition( i32Number, j ) ;
				pccString = GetFilterId( i32Aux ) ;
				fprintf( ai_pfFile, acIndent ) ;
				fprintf( ai_pfFile, "\t\tFilter Handle By Position: <%d - %s>\n", i32Aux, pccString ) ;

				i8Number = GetFilterIsApplicable( i32Aux ) ;
				pccString = M4ClBool( i8Number ) ;
				fprintf( ai_pfFile, acIndent ) ;
				fprintf( ai_pfFile, "\t\tFilter Is Applicable: <%d - %s>\n", i8Number, pccString ) ;
			}


			i16Aux = GetNodeNumberOfPlugs( i32Number ) ;

			fprintf( ai_pfFile, acIndent ) ;
			fprintf( ai_pfFile, "\tPlugs: <%d>\n", i16Aux ) ;

			for( j = 0 ; j < i16Aux ; j++ )
			{
				fprintf( ai_pfFile, acIndent ) ;
				fprintf( ai_pfFile, "\t\t<%d>\n", j ) ;

				i32Aux = GetNodePlugHandleByPosition( i32Number, j ) ;
				pccString = GetPlugFatherChanneId( i32Aux ) ;
				pcAux = GetPlugFatherNodeId( i32Aux ) ;
				fprintf( ai_pfFile, acIndent ) ;
				fprintf( ai_pfFile, "\t\tPlug Handle By Position: <%d - %s.%s>\n", i32Aux, pccString, pcAux ) ;

				i8Number = GetPlugIsApplicable( i32Aux ) ;
				pccString = M4ClBool( i8Number ) ;
				fprintf( ai_pfFile, acIndent ) ;
				fprintf( ai_pfFile, "\t\tPlug Is Applicable: <%d - %s>\n", i8Number, pccString ) ;
			}

		}
	}


	fprintf( ai_pfFile, acIndent ) ;
	fprintf( ai_pfFile, "============ End Security =================================================\n" ) ;


    return( M4_SUCCESS ) ;
}


m4return_t  ClCompiledMCR :: PrintSecurity( m4uint8_t ai_iSystemDebug, m4pcchar_t ai_pccPath )
{

	m4return_t	iResult ;
    m4char_t	acFile[ M4CH_MAX_FILE + 1 ] ;
    FILE        *pfFile ;


	if( ai_iSystemDebug < 2 )
	{
		return( M4_SUCCESS ) ;
	}
    
    if( ai_pccPath != 0 && *ai_pccPath != '\0' )
    {
        sprintf( acFile, "%s%s%s&%d&%s.st", ai_pccPath, M4_BACK_SLASH, GetChannelId(), GetChannelCsType(), GetSecurityMaskId() ) ;
    }
    else
    {
        sprintf( acFile, "%s&%d&%s.st", GetChannelId(), GetChannelCsType(), GetSecurityMaskId() ) ;
    }

	// UNICODE FILE
	eUniFileEncodingType_t eEncoding = M4UniNative ;

    pfFile = M4Fopen( acFile, M4UniWrite, eEncoding ) ;

    if( pfFile != NULL )
    {
        iResult = _PrintSecurity( pfFile ) ;

        if( iResult != M4_SUCCESS )
        {
            fprintf( pfFile, "Error Printing MetaSecurity\n" ) ;
        }
        fclose( pfFile)  ;
    }

    return( iResult ) ;
}







