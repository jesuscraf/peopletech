
//==============================================================================
//
// (c) Copyright  1991-2006 Meta Software M.S., S.A
// All rights reserved.
//
// Module:              m4unicode.dll
// File:                m4unilocal.cpp   
// Project:             Meta4 PeopleNet    
// Author:              Meta Software M.S. , S.A
// Date:                04-01-2007
// Language:            C++
// Operating System:    ALL
// Design Document:     XXX.DOC
//
//
// Definition:
//
//    Este módulo contiene la definición de las funciones de idioma de unicode
//
//
//==============================================================================


#include "m4unicode.hpp"
#include "m4uniutil.hpp"




// ==============================================================
// Tablas de tratamiento de caracteres con idioma ===============
// ==============================================================

extern unsigned char g_aucUpperUtf8[ ][ 8 ] ;
extern unsigned short g_iUpperUtf8Length ;

extern unsigned char g_aucLowerUtf8[ ][ 8 ] ;
extern unsigned short g_iLowerUtf8Length ;


#define	M4_CHAR_ARRAY_SIZE		256

static  unsigned char	s_aucUpperANSI[ M4_CHAR_ARRAY_SIZE ] =
{
//  000, 001, 002, 003, 004, 005, 006, 007, 008, 009, 010, 011, 012, 013, 014, 015,
//  000, 001, 002, 003, 004, 005, 006, 007, 008, 009, 010, 011, 012, 013, 014, 015,
      0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,

//  016, 017, 018, 019, 020, 021, 022, 023, 024, 025, 026, 027, 028, 029, 030, 031,
//  016, 017, 018, 019, 020, 021, 022, 023, 024, 025, 026, 027, 028, 029, 030, 031,
     16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,

//  032, 033, 034, 035, 036, 037, 038, 039, 040, 041, 042, 043, 044, 045, 046, 047,
//  032, 033, 034, 035, 036, 037, 038, 039, 040, 041, 042, 043, 044, 045, 046, 047,
     32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,

//  048, 049, 050, 051, 052, 053, 054, 055, 056, 057, 058, 059, 060, 061, 062, 063,
//  048, 049, 050, 051, 052, 053, 054, 055, 056, 057, 058, 059, 060, 061, 062, 063,
     48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,

//  064, 065, 066, 067, 068, 069, 070, 071, 072, 073, 074, 075, 076, 077, 078, 079,
//  064, 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
     64, 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',

//  080, 081, 082, 083, 084, 085, 086, 087, 088, 089, 090, 091, 092, 093, 094, 095,
//  'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 091, 092, 093, 094, 095,
    'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',  91,  92,  93,  94,  95,

//  096, 097, 098, 099, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
//  096','a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
     96, 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',

//  112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
//  'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 123, 124, 125, 126, 127,
    'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 123, 124, 125, 126, 127,

//  128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
//  128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
    128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,

//  144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
//  144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
    144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,

//  160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
//  160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
    160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,

//  176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
//  176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
    176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,

//  192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
//  'À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É', 'Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï',
    'À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É', 'Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï',

//  208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
//  'Ð', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 215, 'Ø', 'Ù', 'Ú', 'Û', 'Ü', 'Ý', 'Þ', 'ß',
    'Ð', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 215, 'Ø', 'Ù', 'Ú', 'Û', 'Ü', 'Ý', 'Þ', 'ß',

//  224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
//  'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç', 'è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï',
    'À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É', 'Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï',

//  240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255
//  'ð', 'ñ', 'ò', 'ó', 'ô', 'õ', 'ö', 247, 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'þ', 'ÿ'
    'Ð', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 247, 'Ø', 'Ù', 'Ú', 'Û', 'Ü', 'Ý', 'Þ', 'ÿ'

} ;



static  unsigned char	s_aucLowerANSI[ M4_CHAR_ARRAY_SIZE ] =
{
//  000, 001, 002, 003, 004, 005, 006, 007, 008, 009, 010, 011, 012, 013, 014, 015,
//  000, 001, 002, 003, 004, 005, 006, 007, 008, 009, 010, 011, 012, 013, 014, 015,
      0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,

//  016, 017, 018, 019, 020, 021, 022, 023, 024, 025, 026, 027, 028, 029, 030, 031,
//  016, 017, 018, 019, 020, 021, 022, 023, 024, 025, 026, 027, 028, 029, 030, 031,
     16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,

//  032, 033, 034, 035, 036, 037, 038, 039, 040, 041, 042, 043, 044, 045, 046, 047,
//  032, 033, 034, 035, 036, 037, 038, 039, 040, 041, 042, 043, 044, 045, 046, 047,
     32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,

//  048, 049, 050, 051, 052, 053, 054, 055, 056, 057, 058, 059, 060, 061, 062, 063,
//  048, 049, 050, 051, 052, 053, 054, 055, 056, 057, 058, 059, 060, 061, 062, 063,
     48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,

//  064, 065, 066, 067, 068, 069, 070, 071, 072, 073, 074, 075, 076, 077, 078, 079,
//  064, 'A', 'B', 'C', 'D,' 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
     64, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',

//  080, 081, 082, 083, 084, 085, 086, 087, 088, 089, 090, 091, 092, 093, 094, 095,
//  'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 091, 092, 093, 094, 095,
    'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',  91,  92,  93,  94,  95,

//  096, 097, 098, 099, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
//  096, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
     96, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',

//  112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
//  'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 123, 124, 125, 126, 127,
    'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 123, 124, 125, 126, 127,

//  128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
//  128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
    128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,

//  144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
//  144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
    144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,

//  160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
//  160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
    160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,

//  176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
//  176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
    176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,

//  192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
//  'À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É', 'Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï',
    'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç', 'è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï',

//  208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
//  'Ð', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 215, 'Ø', 'Ù', 'Ú', 'Û', 'Ü', 'Ý', 'Þ', 'ß',
    'ð', 'ñ', 'ò', 'ó', 'ô', 'õ', 'ö', 215, 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'þ', 'ß',

//  224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
//  'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç', 'è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï',
    'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç', 'è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï',

//  240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255
//  'ð', 'ñ', 'ò', 'ó', 'ô', 'õ', 'ö', 247, 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'þ', 'ÿ'
    'ð', 'ñ', 'ò', 'ó', 'ô', 'õ', 'ö', 247, 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'þ', 'ÿ'

} ;




static  int	s_aucSensitiveCharWeights[ M4_CHAR_ARRAY_SIZE ] =
{
//  000, 001, 002, 003, 004, 005, 006, 007, 008, 009, 010, 011, 012, 013, 014, 015,
//  000, 001, 002, 003, 004, 005, 006, 007, 008, 009, 010, 011, 012, 013, 014, 015,
      0,   1,   2,   3,   4,   5,   6, 128, 129, 130, 127,   7, 126,   8,  10,   9,

//  016, 017, 018, 019, 020, 021, 022, 023, 024, 025, 026, 027, 028, 029, 030, 031,
//  016, 017, 018, 019, 020, 021, 022, 023, 024, 025, 026, 027, 028, 029, 030, 031,
     66,  18,  17,  16,  15,  14,  13,  12,  11,  65,  64,  63,  62,  61,  60,  59,

//  032, 033, 034, 035, 036, 037, 038, 039, 040, 041, 042, 043, 044, 045, 046, 047,
//  032, 033, 034, 035, 036, 037, 038, 039, 040, 041, 042, 043, 044, 045, 046, 047,
    131,  26,  25,  24,  23,  22,  21,  20,  19,  34,  33,  32,  31,  30,  29,  28,

//  048, 049, 050, 051, 052, 053, 054, 055, 056, 057, 058, 059, 060, 061, 062, 063,
//  '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 058, 059, 060, 061, 062, 063,
    246, 247, 248, 249, 250, 251, 252, 253, 254, 255,  27,  58,  57,  56,  55,  54,

//  064, 065, 066, 067, 068, 069, 070, 071, 072, 073, 074, 075, 076, 077, 078, 079,
//  064, 'A', 'B', 'C', 'D,' 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
     53, 132, 148, 150, 154, 158, 168, 170, 172, 174, 184, 186, 188, 190, 192, 196,

//  080, 081, 082, 083, 084, 085, 086, 087, 088, 089, 090, 091, 092, 093, 094, 095,
//  'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 091, 092, 093, 094, 095,
    210, 212, 214, 216, 219, 223, 233, 235, 237, 239, 244, 125, 124, 123, 122, 121,

//  096, 097, 098, 099, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
//  096, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
    120, 133, 149, 151, 155, 159, 169, 171, 173, 175, 185, 187, 189, 191, 193, 197,

//  112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
//  'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 123, 124, 125, 126, 127,
    211, 213, 215, 217, 220, 224, 234, 236, 238, 240, 245,  52,  51,  50,  48,  48,

//  128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
//  128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
     47,  46,  45,  44,  43,  42,  41,  40,  38,  38,  37,  36,  35, 119, 118, 117,

//  144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
//  144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
    116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101,

//  160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
//  160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
    100,  99,  97,  97,  96,  95,  94,  93,  92,  91,  90,  89,  88,  87,  86,  85,

//  176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
//  176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
     84,  83,  82,  81,  80,  79,  78,  77,  76,  75,  74,  73,  72,  71,  70,  69,

//  192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
//  'À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É', 'Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï',
    136, 134, 138, 142, 140, 144, 146, 152, 162, 160, 164, 166, 178, 176, 180, 182,

//  208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
//  'Ð', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 215, 'Ø', 'Ù', 'Ú', 'Û', 'Ü', 'Ý', 'Þ', 'ß',
    156, 194, 200, 198, 202, 206, 204,  68, 208, 227, 225, 229, 231, 241, 221, 218,

//  224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
//  'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç', 'è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï',
    137, 135, 139, 143, 141, 145, 147, 153, 163, 161, 165, 167, 179, 177, 181, 183,

//  240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255
//  'ð', 'ñ', 'ò', 'ó', 'ô', 'õ', 'ö', 247, 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'þ', 'ÿ'
    157, 195, 201, 199, 203, 207, 205,  67, 209, 228, 226, 230, 232, 242, 222, 243

} ;



static  int	s_aucNoSensitiveCharWeights[ M4_CHAR_ARRAY_SIZE ] =
{
//  000, 001, 002, 003, 004, 005, 006, 007, 008, 009, 010, 011, 012, 013, 014, 015,
//  000, 001, 002, 003, 004, 005, 006, 007, 008, 009, 010, 011, 012, 013, 014, 015,
      0,   1,   2,   3,   4,   5,   6, 128, 129, 130, 127,   7, 126,   8,  10,   9,

//  016, 017, 018, 019, 020, 021, 022, 023, 024, 025, 026, 027, 028, 029, 030, 031,
//  016, 017, 018, 019, 020, 021, 022, 023, 024, 025, 026, 027, 028, 029, 030, 031,
     66,  18,  17,  16,  15,  14,  13,  12,  11,  65,  64,  63,  62,  61,  60,  59,

//  032, 033, 034, 035, 036, 037, 038, 039, 040, 041, 042, 043, 044, 045, 046, 047,
//  032, 033, 034, 035, 036, 037, 038, 039, 040, 041, 042, 043, 044, 045, 046, 047,
    131,  26,  25,  24,  23,  22,  21,  20,  19,  34,  33,  32,  31,  30,  29,  28,

//  048, 049, 050, 051, 052, 053, 054, 055, 056, 057, 058, 059, 060, 061, 062, 063,
//  '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 058, 059, 060, 061, 062, 063,
    246, 247, 248, 249, 250, 251, 252, 253, 254, 255,  27,  58,  57,  56,  55,  54,

//  064, 065, 066, 067, 068, 069, 070, 071, 072, 073, 074, 075, 076, 077, 078, 079,
//  064, 'A', 'B', 'C', 'D,' 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
     53, 132, 148, 150, 154, 158, 168, 170, 172, 174, 184, 186, 188, 190, 192, 196,

//  080, 081, 082, 083, 084, 085, 086, 087, 088, 089, 090, 091, 092, 093, 094, 095,
//  'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 091, 092, 093, 094, 095,
    210, 212, 214, 216, 219, 223, 233, 235, 237, 239, 244, 125, 124, 123, 122, 121,

//  096, 097, 098, 099, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
//  096, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
    120, 132, 148, 150, 154, 158, 168, 170, 172, 174, 184, 186, 188, 190, 192, 196,

//  112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
//  'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 123, 124, 125, 126, 127,
    210, 212, 214, 216, 219, 223, 233, 235, 237, 239, 244,  52,  51,  50,  48,  48,

//  128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
//  128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
     47,  46,  45,  44,  43,  42,  41,  40,  38,  38,  37,  36,  35, 119, 118, 117,

//  144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
//  144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
    116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101,

//  160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
//  160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
    100,  99,  97,  97,  96,  95,  94,  93,  92,  91,  90,  89,  88,  87,  86,  85,

//  176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
//  176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
     84,  83,  82,  81,  80,  79,  78,  77,  76,  75,  74,  73,  72,  71,  70,  69,

//  192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
//  'À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É', 'Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï',
    136, 134, 138, 142, 140, 144, 146, 152, 162, 160, 164, 166, 178, 176, 180, 182,

//  208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
//  'Ð', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 215, 'Ø', 'Ù', 'Ú', 'Û', 'Ü', 'Ý', 'Þ', 'ß',
    156, 194, 200, 198, 202, 206, 204,  68, 208, 227, 225, 229, 231, 241, 221, 218,

//  224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
//  'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç', 'è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï',
    136, 134, 138, 142, 140, 144, 146, 152, 162, 160, 164, 166, 178, 176, 180, 182,

//  240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255
//  'ð', 'ñ', 'ò', 'ó', 'ô', 'õ', 'ö', 247, 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'þ', 'ÿ'
    156, 194, 200, 198, 202, 206, 204,  67, 208, 227, 225, 229, 231, 241, 221, 243,

} ;



//=================================================================================
// Compara 2 caracteres utf-8 de 4 bytes (little endiang) según su orden
//
// @param ai_pcvUtf8Char1	Primer caracter a comparar
// @param ai_pcvUtf8Char2	Segundo caracter a comparar
// @return int				0 si son iguales
//							< 0 si el primer caracter es menor
//							> 0 si el primer caracter es mayor
//=================================================================================

static	int	_CompareUtf8Char( const void* ai_pcvUtf8Char1, const void* ai_pcvUtf8Char2 )
{
	return( memcmp( ai_pcvUtf8Char1, ai_pcvUtf8Char2, 4 ) ) ;
}



//=================================================================================
// Convierte una cadena "multi byte" (stringz) a mayúsculas o minúsculas
// Tiene en cuenta si es ANSI o utf8
// Sólo convierte los caracteres entre 0 y 255
// En utf 8 de 0 a 127 aplica la matrid de transformación
// En utf 8 de 128 a 255 compone el caracter, lo transforma y lo vuelve a descomponer
//
// Ver notas _Utf16Chars
//
// @param ai_pccString			Cadena "wide byte" (stringz) utf8 que se quiere convertir
// @param ai_iNumChars			Máximo número de caracteres que se quiere convertir
// @param ai_pcConvertANSI		Array con la transformación de los caracteres ANSI
// @param ai_pcConvertUtf8		Array con la transformación de los caracteres en UTF-8
// @param a_iConvertUtf8Length	Longitud del array con la transformación de los caracteres en UTF-8
// @param ao_riBytesEaten		Número de bytes que se han procesado
// @return char*				Cadena "multi byte" (stringz) utf8, conversión de ai_pccString
//=================================================================================

static	char*	_ConvertCase( char* ai_pcString, size_t ai_iNumChars, unsigned char* ai_pcConvertANSI, unsigned char* ai_pcConvertUtf8, unsigned short a_iConvertUtf8Length, size_t& ao_riBytesEaten )
{

	char*			pcResult = NULL ;
	unsigned char	c = 0 ;
	unsigned char	t = 0 ;
	unsigned char	*p = 0 ;
	size_t			iLength = 0 ;
	size_t			iSize = 0 ;
	size_t			iNumChar = 0 ;
	unsigned char	abChar[ 4 ] ;


	ao_riBytesEaten = 0 ;

	if( ai_pcString == NULL )
	{
		return( NULL ) ;
	}

	pcResult = ai_pcString ;

	if( _IsUnicode() == 1 )
	{
		iSize = strlen( ai_pcString ) ;

		while( ( c = *pcResult ) != '\0' && iNumChar < ai_iNumChars )
		{
			if( M4UNI_IS_ASCII( c ) )
			{
				// Si es ascii se convierte según la matriz fija
				t = ai_pcConvertANSI[ c ] ;

				if( t != c )
				{
					*pcResult = t ;
				}
				iNumChar++ ;
				pcResult++ ;
			}
			else
			{
				// Si no es ascii se convierte según la matriz utf-8
				iLength = M4UNI_UTF8_LENGTH( c ) ;

				if( pcResult + iLength > ai_pcString + iSize )
				{
					// Si el caracter unicode está cortado no se procesa
					iLength = ai_pcString + iSize - pcResult ;
				}
				else
				{
					memset( abChar, 0, 4 ) ;
					memcpy( abChar, pcResult, iLength ) ;

					p = (unsigned char*)bsearch( abChar, ai_pcConvertUtf8, a_iConvertUtf8Length, 8, _CompareUtf8Char ) ;

					if( p != NULL )
					{
						memcpy( pcResult, p + 4, iLength ) ;
					}

					iNumChar++ ;
				}

				pcResult += iLength ;
			}
		}
	}
	else
	{
		// Si no se es unicode se convierte según la matriz fija
		while( ( c = *pcResult ) != '\0' && iNumChar < ai_iNumChars )
		{
			t = ai_pcConvertANSI[ c ] ;

			if( t != c )
			{
				*pcResult = t ;
			}

			iNumChar++ ;
			pcResult++ ;
		}
	}

	ao_riBytesEaten = pcResult - ai_pcString ;

	return( ai_pcString ) ;
}



//=================================================================================
// Compara 2 cadenas "multi byte" (stringz)
// Tiene en cuenta si es ANSI o utf8
// Sólo tienen pesos los caracteres entre 0 y 255. Los demás se ordenan por código
// En utf 8 de 0 a 127 aplica la tabla de pesos
// En utf 8 de 128 a 255 compone el caracter y aplica la tabla de pesos
//
// Ver notas _Utf16Chars
//
// @param ai_pccString1		Primera cadena "wide byte" (stringz) a comparar
// @param ai_pccString2		Segunda cadena "wide byte" (stringz) a comparar
// @param ai_piWeightArray	Array con los pesos de los caracteres
// @return int				Entero que indica la comparación de la cadena, 0 si son iguales
//								-1 si la primera es más pequeña y 1 si es más grande
//=================================================================================

static	int	_Compare( char* ai_pccString1, char* ai_pccString2, int* ai_piWeightArray )
{

	int				iResult = 0 ;
	int				w1 = 0 ;
	int				w2 = 0 ;
	unsigned char	c1 = 0 ;
	unsigned char	c2 = 0 ;
	unsigned char	d1 = 0 ;
	unsigned char	d2 = 0 ;


	if( ai_pccString1 != NULL )
	{
		if( ai_pccString2 != NULL )
		{
			if( _IsUnicode() == 1 )
			{
				c1 = 1 ;
				c2 = 1 ;
				while( iResult == 0 && c1 != '\0' && c2 != '\0' )
				{
					c1 = *ai_pccString1++ ;

					if( M4UNI_IS_ASCII( c1 ) )
					{
						// Si es ascii tiene el peso normal
						w1 = ai_piWeightArray[ c1 ] ;
					}
					else if( M4UNI_IS_ANSI( c1 ) && ( d1 = *ai_pccString1 ) != '\0' )
					{
						// Si es ansi y el siguiente no es 0 se obtiene el byte ansi
						c1 = M4UNI_UTF8_TO_ANSI( c1, d1 ) ;
						w1 = ai_piWeightArray[ c1 ] ;
						ai_pccString1++ ;
					}
					else
					{
						// Si es > 255 van siempre después y en el orden del número
						w1 = int( c1 ) + 0xFF ;
					}

					c2 = *ai_pccString2++ ;

					if( M4UNI_IS_ASCII( c2 ) )
					{
						// Si es ascii tiene el peso normal
						w2 = ai_piWeightArray[ c2 ] ;
					}
					else if( M4UNI_IS_ANSI( c2 ) && ( d2 = *ai_pccString2 ) != '\0' )
					{
						// Si es ansi y el siguiente no es 0 se obtiene el byte ansi
						c2 = M4UNI_UTF8_TO_ANSI( c2, d2 ) ;
						w2 = ai_piWeightArray[ c2 ] ;
						ai_pccString2++ ;
					}
					else
					{
						// Si es > 255 van siempre después y en el orden del número
						w2 = int( c2 ) + 0xFF ;
					}

					iResult = w1 - w2 ;
				}
			}
			else
			{
				c1 = 1 ;
				c2 = 1 ;
				while( iResult == 0 && c1 != '\0' && c2 != '\0' )
				{
					c1 = *ai_pccString1++ ;
					w1 = ai_piWeightArray[ c1 ] ;

					c2 = *ai_pccString2++ ;
					w2 = ai_piWeightArray[ c2 ] ;

					iResult = w1 - w2 ;
				}
			}
		}
		else
		{
			iResult = 1 ;
		}
	}
	else
	{
		if( ai_pccString2 != NULL )
		{
			iResult = -1 ;
		}
		else
		{
			iResult = 0 ;
		}
	}

	return( iResult ) ;
}



//=================================================================================
// Convierte el primer caracter de una cadena "multi byte" (stringz) utf8 a mayúsculas
// Usa la función interna que lo hace
//
// @param ai_pccString		Cadena "wide byte" (stringz) que se quiere convertir
// @param ao_riBytesEaten	Número de bytes que se han procesado
// @return char*			Cadena "multi byte" (stringz), conversión de ai_pccString
//=================================================================================

char*	M4ChrUpr( char* ai_pcString, size_t& ao_riBytesEaten )
{
	return( _ConvertCase( ai_pcString, size_t( 1 ), s_aucUpperANSI, (unsigned char*)g_aucUpperUtf8, g_iUpperUtf8Length, ao_riBytesEaten ) ) ;
}



//=================================================================================
// Convierte una cadena "multi byte" (stringz) a mayúsculas
// Usa la función interna que lo hace
//
// @param ai_pccString		Cadena "wide byte" (stringz) que se quiere convertir
// @return char*			Cadena "multi byte" (stringz), conversión de ai_pccString
//=================================================================================

char*	M4StrUpr( char* ai_pcString )
{
	size_t	iBytesEaten = 0 ;

	return( _ConvertCase( ai_pcString, size_t( -1 ), s_aucUpperANSI, (unsigned char*)g_aucUpperUtf8, g_iUpperUtf8Length, iBytesEaten ) ) ;
}



//=================================================================================
// Convierte una cadena "multi byte" (stringz) a minúsculas
// Usa la función interna que lo hace
//
// @param ai_pccString		Cadena "wide byte" (stringz) que se quiere convertir
// @return char*			Cadena "multi byte" (stringz), conversión de ai_pccString
//=================================================================================

char*	M4StrLwr( char* ai_pcString )
{
	size_t	iBytesEaten = 0 ;

	return( _ConvertCase( ai_pcString, size_t( -1 ), s_aucLowerANSI, (unsigned char*)g_aucLowerUtf8, g_iLowerUtf8Length, iBytesEaten ) ) ;
}



//=================================================================================
// Compara 2 cadenas "multi byte" (stringz) case sensitive
// Usa la función interna que lo hace
//
// @param ai_pccString1		Primera cadena "wide byte" (stringz) a comparar
// @param ai_pccString2		Segunda cadena "wide byte" (stringz) a comparar
// @return int				Entero que indica la comparación de la cadena, 0 si son iguales
//								-1 si la primera es más pequeña y 1 si es más grande
//=================================================================================

int	M4StrCmp( char* ai_pccString1, char* ai_pccString2 )
{
	return( _Compare( ai_pccString1, ai_pccString2, s_aucSensitiveCharWeights ) ) ;
}



//=================================================================================
// Compara 2 cadenas "multi byte" (stringz) case insensitive
// Usa la función interna que lo hace
//
// @param ai_pccString1		Primera cadena "wide byte" (stringz) a comparar
// @param ai_pccString2		Segunda cadena "wide byte" (stringz) a comparar
// @return int				Entero que indica la comparación de la cadena, 0 si son iguales
//								-1 si la primera es más pequeña y 1 si es más grande
//=================================================================================

int	M4StrCmpi( char* ai_pccString1, char* ai_pccString2 )
{
	return( _Compare( ai_pccString1, ai_pccString2, s_aucNoSensitiveCharWeights ) ) ;
}


